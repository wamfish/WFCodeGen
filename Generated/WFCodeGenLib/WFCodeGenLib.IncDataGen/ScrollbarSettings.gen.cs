/// <auto-generated/>
using WFLib;
using Godot;
using System;
namespace WFCodeGen;
public partial class ScrollbarSettings : Data
{
	protected override void OnBaseConstruct()
	{
		Init();
	}
	public override int FieldCount => 8;
	public ScrollbarSettings Rent()=>DataFactory<ScrollbarSettings>.Rent();
	~ScrollbarSettings() => Dispose();
	public override void Dispose()
	{
		DataFactory<ScrollbarSettings>.Return(this);
		base.Dispose();
	}
	public override bool IsRecord => false;
	public partial class DataField : DataField<ScrollbarSettings>
	{
		public DataField(int field)
		{
			Field=field;
		}
		public StyleBoxSettings.DataField ScrollbarStyleBox => Data.ScrollbarStyleBox;
		public StyleBoxSettings.DataField ScrollbarFocusStyleBox => Data.ScrollbarFocusStyleBox;
		public StyleBoxSettings.DataField VGrabberStyleBox => Data.VGrabberStyleBox;
		public StyleBoxSettings.DataField VGrabberHoverStyleBox => Data.VGrabberHoverStyleBox;
		public StyleBoxSettings.DataField VGrabberPressedStyleBox => Data.VGrabberPressedStyleBox;
		public StyleBoxSettings.DataField HGrabberStyleBox => Data.HGrabberStyleBox;
		public StyleBoxSettings.DataField HGrabberHoverStyleBox => Data.HGrabberHoverStyleBox;
		public StyleBoxSettings.DataField HGrabberPressedStyleBox => Data.HGrabberPressedStyleBox;
	}
	public override void Clear()
	{
		if (ScrollbarStyleBox == null)
		{
			ScrollbarStyleBox = new(0);
		}
		ScrollbarStyleBox.Clear();
		if (ScrollbarFocusStyleBox == null)
		{
			ScrollbarFocusStyleBox = new(1);
		}
		ScrollbarFocusStyleBox.Clear();
		if (VGrabberStyleBox == null)
		{
			VGrabberStyleBox = new(2);
		}
		VGrabberStyleBox.Clear();
		if (VGrabberHoverStyleBox == null)
		{
			VGrabberHoverStyleBox = new(3);
		}
		VGrabberHoverStyleBox.Clear();
		if (VGrabberPressedStyleBox == null)
		{
			VGrabberPressedStyleBox = new(4);
		}
		VGrabberPressedStyleBox.Clear();
		if (HGrabberStyleBox == null)
		{
			HGrabberStyleBox = new(5);
		}
		HGrabberStyleBox.Clear();
		if (HGrabberHoverStyleBox == null)
		{
			HGrabberHoverStyleBox = new(6);
		}
		HGrabberHoverStyleBox.Clear();
		if (HGrabberPressedStyleBox == null)
		{
			HGrabberPressedStyleBox = new(7);
		}
		HGrabberPressedStyleBox.Clear();
		OnClear();
	}
	public override void Init()
	{
		if (ScrollbarStyleBox == null) 
		{
			ScrollbarStyleBox = new(0);
		}
		ScrollbarStyleBox.Init();
		if (ScrollbarFocusStyleBox == null) 
		{
			ScrollbarFocusStyleBox = new(1);
		}
		ScrollbarFocusStyleBox.Init();
		if (VGrabberStyleBox == null) 
		{
			VGrabberStyleBox = new(2);
		}
		VGrabberStyleBox.Init();
		if (VGrabberHoverStyleBox == null) 
		{
			VGrabberHoverStyleBox = new(3);
		}
		VGrabberHoverStyleBox.Init();
		if (VGrabberPressedStyleBox == null) 
		{
			VGrabberPressedStyleBox = new(4);
		}
		VGrabberPressedStyleBox.Init();
		if (HGrabberStyleBox == null) 
		{
			HGrabberStyleBox = new(5);
		}
		HGrabberStyleBox.Init();
		if (HGrabberHoverStyleBox == null) 
		{
			HGrabberHoverStyleBox = new(6);
		}
		HGrabberHoverStyleBox.Init();
		if (HGrabberPressedStyleBox == null) 
		{
			HGrabberPressedStyleBox = new(7);
		}
		HGrabberPressedStyleBox.Init();
		OnInitialize();
	}
	public override void CopyTo(Data toData)
	{
		if (!(toData is ScrollbarSettings to)) return;
		to.Clear();
		ScrollbarStyleBox.CopyTo(to.ScrollbarStyleBox);
		ScrollbarFocusStyleBox.CopyTo(to.ScrollbarFocusStyleBox);
		VGrabberStyleBox.CopyTo(to.VGrabberStyleBox);
		VGrabberHoverStyleBox.CopyTo(to.VGrabberHoverStyleBox);
		VGrabberPressedStyleBox.CopyTo(to.VGrabberPressedStyleBox);
		HGrabberStyleBox.CopyTo(to.HGrabberStyleBox);
		HGrabberHoverStyleBox.CopyTo(to.HGrabberHoverStyleBox);
		HGrabberPressedStyleBox.CopyTo(to.HGrabberPressedStyleBox);
	}
	public override void FieldCopyTo(Data toData, int field)
	{
		if (!(toData is ScrollbarSettings to)) return;
		switch(field)
		{
			case 0:ScrollbarStyleBox.CopyTo(to.ScrollbarStyleBox); return;
			case 1:ScrollbarFocusStyleBox.CopyTo(to.ScrollbarFocusStyleBox); return;
			case 2:VGrabberStyleBox.CopyTo(to.VGrabberStyleBox); return;
			case 3:VGrabberHoverStyleBox.CopyTo(to.VGrabberHoverStyleBox); return;
			case 4:VGrabberPressedStyleBox.CopyTo(to.VGrabberPressedStyleBox); return;
			case 5:HGrabberStyleBox.CopyTo(to.HGrabberStyleBox); return;
			case 6:HGrabberHoverStyleBox.CopyTo(to.HGrabberHoverStyleBox); return;
			case 7:HGrabberPressedStyleBox.CopyTo(to.HGrabberPressedStyleBox); return;
		}
	}
	public override void WriteToBuf(SerializationBuffer sb, bool append=false)
	{
		if (!append) sb.Clear();
		if (!ScrollbarStyleBox.IsDefault())
		{
			sb.WriteSize(0);
			ScrollbarStyleBox.WriteToBuf(sb);
		}
		if (!ScrollbarFocusStyleBox.IsDefault())
		{
			sb.WriteSize(1);
			ScrollbarFocusStyleBox.WriteToBuf(sb);
		}
		if (!VGrabberStyleBox.IsDefault())
		{
			sb.WriteSize(2);
			VGrabberStyleBox.WriteToBuf(sb);
		}
		if (!VGrabberHoverStyleBox.IsDefault())
		{
			sb.WriteSize(3);
			VGrabberHoverStyleBox.WriteToBuf(sb);
		}
		if (!VGrabberPressedStyleBox.IsDefault())
		{
			sb.WriteSize(4);
			VGrabberPressedStyleBox.WriteToBuf(sb);
		}
		if (!HGrabberStyleBox.IsDefault())
		{
			sb.WriteSize(5);
			HGrabberStyleBox.WriteToBuf(sb);
		}
		if (!HGrabberHoverStyleBox.IsDefault())
		{
			sb.WriteSize(6);
			HGrabberHoverStyleBox.WriteToBuf(sb);
		}
		if (!HGrabberPressedStyleBox.IsDefault())
		{
			sb.WriteSize(7);
			HGrabberPressedStyleBox.WriteToBuf(sb);
		}
		sb.WriteSize(-1);
	}
	/// <summary>
	/// ReadFromBuf loads the data from the buffer into the object. 
	/// maxField is used by Table.Filter to only load the fields that are needed.
	/// </summary>
	public override void ReadFromBuf(SerializationBuffer sb, int maxField)
	{
		Clear();
		int fieldIndex;
		fieldIndex = sb.ReadSize();
		if (fieldIndex > maxField) return; 
		if (fieldIndex == 0)
		{
			ScrollbarStyleBox.ReadFromBuf(sb);
			fieldIndex = sb.ReadSize();
			if (fieldIndex > maxField) return;
		}
		if (fieldIndex == 1)
		{
			ScrollbarFocusStyleBox.ReadFromBuf(sb);
			fieldIndex = sb.ReadSize();
			if (fieldIndex > maxField) return;
		}
		if (fieldIndex == 2)
		{
			VGrabberStyleBox.ReadFromBuf(sb);
			fieldIndex = sb.ReadSize();
			if (fieldIndex > maxField) return;
		}
		if (fieldIndex == 3)
		{
			VGrabberHoverStyleBox.ReadFromBuf(sb);
			fieldIndex = sb.ReadSize();
			if (fieldIndex > maxField) return;
		}
		if (fieldIndex == 4)
		{
			VGrabberPressedStyleBox.ReadFromBuf(sb);
			fieldIndex = sb.ReadSize();
			if (fieldIndex > maxField) return;
		}
		if (fieldIndex == 5)
		{
			HGrabberStyleBox.ReadFromBuf(sb);
			fieldIndex = sb.ReadSize();
			if (fieldIndex > maxField) return;
		}
		if (fieldIndex == 6)
		{
			HGrabberHoverStyleBox.ReadFromBuf(sb);
			fieldIndex = sb.ReadSize();
			if (fieldIndex > maxField) return;
		}
		if (fieldIndex == 7)
		{
			HGrabberPressedStyleBox.ReadFromBuf(sb);
			fieldIndex = sb.ReadSize();
			if (fieldIndex > maxField) return;
		}
		// no need to do OnLoad we are in a filter
	}
	/// <summary>
	/// ReadFromBuf loads the data from the buffer into the object. 
	/// </summary>
	public override void ReadFromBuf(SerializationBuffer sb)
	{
		Clear();
		int fieldIndex;
		fieldIndex = sb.ReadSize();
		if (fieldIndex == 0)
		{
			ScrollbarStyleBox.ReadFromBuf(sb);
			fieldIndex = sb.ReadSize();
		}
		if (fieldIndex == 1)
		{
			ScrollbarFocusStyleBox.ReadFromBuf(sb);
			fieldIndex = sb.ReadSize();
		}
		if (fieldIndex == 2)
		{
			VGrabberStyleBox.ReadFromBuf(sb);
			fieldIndex = sb.ReadSize();
		}
		if (fieldIndex == 3)
		{
			VGrabberHoverStyleBox.ReadFromBuf(sb);
			fieldIndex = sb.ReadSize();
		}
		if (fieldIndex == 4)
		{
			VGrabberPressedStyleBox.ReadFromBuf(sb);
			fieldIndex = sb.ReadSize();
		}
		if (fieldIndex == 5)
		{
			HGrabberStyleBox.ReadFromBuf(sb);
			fieldIndex = sb.ReadSize();
		}
		if (fieldIndex == 6)
		{
			HGrabberHoverStyleBox.ReadFromBuf(sb);
			fieldIndex = sb.ReadSize();
		}
		if (fieldIndex == 7)
		{
			HGrabberPressedStyleBox.ReadFromBuf(sb);
			fieldIndex = sb.ReadSize();
		}
		OnLoad();
	}
	public override bool FieldIsDefault(int field)
	{
		switch(field)
		{
			case 0:return ScrollbarStyleBox.IsDefault();
			case 1:return ScrollbarFocusStyleBox.IsDefault();
			case 2:return VGrabberStyleBox.IsDefault();
			case 3:return VGrabberHoverStyleBox.IsDefault();
			case 4:return VGrabberPressedStyleBox.IsDefault();
			case 5:return HGrabberStyleBox.IsDefault();
			case 6:return HGrabberHoverStyleBox.IsDefault();
			case 7:return HGrabberPressedStyleBox.IsDefault();
		}
		return false;
	}
	public override bool FieldIsEqual(Data toFld, int field)
	{
		if (!(toFld is ScrollbarSettings to)) return false;
		switch(field)
		{
			case 0:return ScrollbarStyleBox.IsEqualTo(to.ScrollbarStyleBox);
			case 1:return ScrollbarFocusStyleBox.IsEqualTo(to.ScrollbarFocusStyleBox);
			case 2:return VGrabberStyleBox.IsEqualTo(to.VGrabberStyleBox);
			case 3:return VGrabberHoverStyleBox.IsEqualTo(to.VGrabberHoverStyleBox);
			case 4:return VGrabberPressedStyleBox.IsEqualTo(to.VGrabberPressedStyleBox);
			case 5:return HGrabberStyleBox.IsEqualTo(to.HGrabberStyleBox);
			case 6:return HGrabberHoverStyleBox.IsEqualTo(to.HGrabberHoverStyleBox);
			case 7:return HGrabberPressedStyleBox.IsEqualTo(to.HGrabberPressedStyleBox);
		}
		return false;
	}
	public override string FieldAsString(int field)
	{
		switch(field)
		{
			case 0:return ScrollbarStyleBox.AsString();
			case 1:return ScrollbarFocusStyleBox.AsString();
			case 2:return VGrabberStyleBox.AsString();
			case 3:return VGrabberHoverStyleBox.AsString();
			case 4:return VGrabberPressedStyleBox.AsString();
			case 5:return HGrabberStyleBox.AsString();
			case 6:return HGrabberHoverStyleBox.AsString();
			case 7:return HGrabberPressedStyleBox.AsString();
		}
		return string.Empty;
	}
	public override void FieldFromString(string str, int field)
	{
		switch(field)
		{
			case 0:ScrollbarStyleBox.FromString(str); return;
			case 1:ScrollbarFocusStyleBox.FromString(str); return;
			case 2:VGrabberStyleBox.FromString(str); return;
			case 3:VGrabberHoverStyleBox.FromString(str); return;
			case 4:VGrabberPressedStyleBox.FromString(str); return;
			case 5:HGrabberStyleBox.FromString(str); return;
			case 6:HGrabberHoverStyleBox.FromString(str); return;
			case 7:HGrabberPressedStyleBox.FromString(str); return;
		}
		return;
	}
	public override string FieldName(int field)
	{
		if (field < 0 || field >= FieldCount) return string.Empty;
		return FieldNames[field];
	}
	public override string FieldLabel(int field)
	{
		if (field < 0 || field >= FieldCount) return string.Empty;
		return FieldLabels[field];
	}
	public override void FieldLabelSet(int field, string label)
	{
		if (field < 0 || field >= FieldCount) return;
		FieldLabels[field] = label;
	}
	public override string FieldColumnLabel(int field)
	{
		if (field < 0 || field >= FieldCount) return string.Empty;
		return ColumnLabels[field];
	}
	public override void FieldColumnLabelSet(int field, string label)
	{
		if (field < 0 || field >= FieldCount) return;
		ColumnLabels[field] = label;
	}
	public override void FieldMinSet(int field, object min)
	{
		if (field < 0 || field >= FieldCount) return;
		Min[field] = min;
	}
	public override object FieldMin(int field)
	{
		if (field < 0 || field >= FieldCount) return 0;
		return Min[field];
	}
	public override void FieldMaxSet(int field, object max)
	{
		if (field < 0 || field >= FieldCount) return;
		Max[field] = max;
	}
	public override object FieldMax(int field)
	{
		if (field < 0 || field >= FieldCount) return 0;
		return Max[field];
	}
	public override int FieldIdFromName(string name)
	{
		if (FieldIdLookup.TryGetValue(name, out int id)) return id;
		return -1;
	}
	/// <summary>
	/// Writes to sb the field formated as a key.
	/// maxSize is used for strings only.
	/// </summary>
	public override void FieldAsKey(int field, SerializationBuffer sb, int maxSize)
	{
		switch(field)
		{
			case 0:return; // DataField as key is not supported
			case 1:return; // DataField as key is not supported
			case 2:return; // DataField as key is not supported
			case 3:return; // DataField as key is not supported
			case 4:return; // DataField as key is not supported
			case 5:return; // DataField as key is not supported
			case 6:return; // DataField as key is not supported
			case 7:return; // DataField as key is not supported
		}
	}
	/// <summary>
	/// Returns the field as an object.
	/// </summary>
	public override Object FieldAsObject(int field)
	{
		switch(field)
		{
			case 0:return (Object)ScrollbarStyleBox;
			case 1:return (Object)ScrollbarFocusStyleBox;
			case 2:return (Object)VGrabberStyleBox;
			case 3:return (Object)VGrabberHoverStyleBox;
			case 4:return (Object)VGrabberPressedStyleBox;
			case 5:return (Object)HGrabberStyleBox;
			case 6:return (Object)HGrabberHoverStyleBox;
			case 7:return (Object)HGrabberPressedStyleBox;
		}
		return null;
	}
	/// <summary>
	/// Sets the field to an object.
	/// </summary>
	public override void FieldFromObject(Object o,  int field)
	{
		switch(field)
		{
			case 0:ScrollbarStyleBox = (StyleBoxSettings.DataField) o; return;
			case 1:ScrollbarFocusStyleBox = (StyleBoxSettings.DataField) o; return;
			case 2:VGrabberStyleBox = (StyleBoxSettings.DataField) o; return;
			case 3:VGrabberHoverStyleBox = (StyleBoxSettings.DataField) o; return;
			case 4:VGrabberPressedStyleBox = (StyleBoxSettings.DataField) o; return;
			case 5:HGrabberStyleBox = (StyleBoxSettings.DataField) o; return;
			case 6:HGrabberHoverStyleBox = (StyleBoxSettings.DataField) o; return;
			case 7:HGrabberPressedStyleBox = (StyleBoxSettings.DataField) o; return;
		}
	}
	/// <summary>
	/// Returns the field Type.
	/// </summary>
	public override Type FieldType(int field)
	{
		switch(field)
		{
			case 0:return ScrollbarStyleBox.GetType();
			case 1:return ScrollbarFocusStyleBox.GetType();
			case 2:return VGrabberStyleBox.GetType();
			case 3:return VGrabberHoverStyleBox.GetType();
			case 4:return VGrabberPressedStyleBox.GetType();
			case 5:return HGrabberStyleBox.GetType();
			case 6:return HGrabberHoverStyleBox.GetType();
			case 7:return HGrabberPressedStyleBox.GetType();
		}
		return null;
	}
	public partial class Context : DataContext<ScrollbarSettings>
	{
		protected override void OnBaseConstruct()
		{
			Data = DataFactory<ScrollbarSettings>.Rent();
		}
		public static Context Rent() => (Context) DataContextFactory<ScrollbarSettings>.Rent();
		public override void Dispose()
		{
			DataContextFactory<ScrollbarSettings>.Return(this);
		}
	}
	public static class FID
	{
		public const int ScrollbarStyleBox = 0;
		public const int ScrollbarFocusStyleBox = 1;
		public const int VGrabberStyleBox = 2;
		public const int VGrabberHoverStyleBox = 3;
		public const int VGrabberPressedStyleBox = 4;
		public const int HGrabberStyleBox = 5;
		public const int HGrabberHoverStyleBox = 6;
		public const int HGrabberPressedStyleBox = 7;
	}
	static object[] Min = { (int) 0,(int) 0,(int) 0,(int) 0,(int) 0,(int) 0,(int) 0,(int) 0, };
	static object[] Max = { (int) 0,(int) 0,(int) 0,(int) 0,(int) 0,(int) 0,(int) 0,(int) 0, };
	static string[] FieldLabels =
	{
		"Scrollbar Style Box",
		"Scrollbar Focus Style Box",
		"V Grabber Style Box",
		"V Grabber Hover Style Box",
		"V Grabber Pressed Style Box",
		"H Grabber Style Box",
		"H Grabber Hover Style Box",
		"H Grabber Pressed Style Box",
	};
	static string[] ColumnLabels =
	{
		"Scrollbar Style Box",
		"Scrollbar Focus Style Box",
		"V Grabber Style Box",
		"V Grabber Hover Style Box",
		"V Grabber Pressed Style Box",
		"H Grabber Style Box",
		"H Grabber Hover Style Box",
		"H Grabber Pressed Style Box",
	};
	static Dictionary<string, int> FieldIdLookup = new()
	{
		{ "ScrollbarStyleBox", 0 },
		{ "ScrollbarFocusStyleBox", 1 },
		{ "VGrabberStyleBox", 2 },
		{ "VGrabberHoverStyleBox", 3 },
		{ "VGrabberPressedStyleBox", 4 },
		{ "HGrabberStyleBox", 5 },
		{ "HGrabberHoverStyleBox", 6 },
		{ "HGrabberPressedStyleBox", 7 },
	};
	static string[] FieldNames =
	{
		"ScrollbarStyleBox",
		"ScrollbarFocusStyleBox",
		"VGrabberStyleBox",
		"VGrabberHoverStyleBox",
		"VGrabberPressedStyleBox",
		"HGrabberStyleBox",
		"HGrabberHoverStyleBox",
		"HGrabberPressedStyleBox",
	};
	static string[] TypeNames =
	{
		"DataField",
		"DataField",
		"DataField",
		"DataField",
		"DataField",
		"DataField",
		"DataField",
		"DataField",
	};
	public override string[] StaticTypeNames => TypeNames;
	static List<ValidationFunc>[] ValidationFuncs = new List<ValidationFunc>[8];
	public override List<ValidationFunc>[] StaticValidationFuncs => ValidationFuncs;
	public partial class Util : DataUtil<ScrollbarSettings>
	{
	}
}
