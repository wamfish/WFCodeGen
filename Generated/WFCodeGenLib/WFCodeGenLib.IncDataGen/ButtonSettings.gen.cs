/// <auto-generated/>
using WFLib;
using Godot;
using System;
namespace WFCodeGen;
public partial class ButtonSettings : Data
{
	protected override void OnBaseConstruct()
	{
		Init();
	}
	public override int FieldCount => 12;
	public ButtonSettings Rent()=>DataFactory<ButtonSettings>.Rent();
	~ButtonSettings() => Dispose();
	public override void Dispose()
	{
		DataFactory<ButtonSettings>.Return(this);
		base.Dispose();
	}
	public override bool IsRecord => false;
	public partial class DataField : DataField<ButtonSettings>
	{
		public DataField(int field)
		{
			Field=field;
		}
		public int ButtonHSeperation => Data.ButtonHSeperation;
		public FontSettings.DataField Font => Data.Font;
		public Godot.Color NormalFontColor => Data.NormalFontColor;
		public Godot.Color FocusFontColor => Data.FocusFontColor;
		public Godot.Color HoverFontColor => Data.HoverFontColor;
		public Godot.Color PressedFontColor => Data.PressedFontColor;
		public Godot.Color DisabledFontColor => Data.DisabledFontColor;
		public StyleBoxSettings.DataField NormalStyleBox => Data.NormalStyleBox;
		public StyleBoxSettings.DataField FocusStyleBox => Data.FocusStyleBox;
		public StyleBoxSettings.DataField HoverStyleBox => Data.HoverStyleBox;
		public StyleBoxSettings.DataField PressedStyleBox => Data.PressedStyleBox;
		public StyleBoxSettings.DataField DisabledStyleBox => Data.DisabledStyleBox;
	}
	public override void Clear()
	{
		ButtonHSeperation = 0;
		if (Font == null)
		{
			Font = new(1);
		}
		Font.Clear();
		NormalFontColor = Godot.Colors.Black;
		FocusFontColor = Godot.Colors.Black;
		HoverFontColor = Godot.Colors.Black;
		PressedFontColor = Godot.Colors.Black;
		DisabledFontColor = Godot.Colors.Black;
		if (NormalStyleBox == null)
		{
			NormalStyleBox = new(7);
		}
		NormalStyleBox.Clear();
		if (FocusStyleBox == null)
		{
			FocusStyleBox = new(8);
		}
		FocusStyleBox.Clear();
		if (HoverStyleBox == null)
		{
			HoverStyleBox = new(9);
		}
		HoverStyleBox.Clear();
		if (PressedStyleBox == null)
		{
			PressedStyleBox = new(10);
		}
		PressedStyleBox.Clear();
		if (DisabledStyleBox == null)
		{
			DisabledStyleBox = new(11);
		}
		DisabledStyleBox.Clear();
		OnClear();
	}
	public override void Init()
	{
		ButtonHSeperation = 5;
		if (Font == null) 
		{
			Font = new(1);
		}
		Font.Init();
		NormalFontColor = Colors.Black;
		FocusFontColor = Colors.Black;
		HoverFontColor = Colors.White;
		PressedFontColor = Colors.Green;
		DisabledFontColor = Colors.Gray;
		if (NormalStyleBox == null) 
		{
			NormalStyleBox = new(7);
		}
		NormalStyleBox.Init();
		if (FocusStyleBox == null) 
		{
			FocusStyleBox = new(8);
		}
		FocusStyleBox.Init();
		if (HoverStyleBox == null) 
		{
			HoverStyleBox = new(9);
		}
		HoverStyleBox.Init();
		if (PressedStyleBox == null) 
		{
			PressedStyleBox = new(10);
		}
		PressedStyleBox.Init();
		if (DisabledStyleBox == null) 
		{
			DisabledStyleBox = new(11);
		}
		DisabledStyleBox.Init();
		OnInitialize();
	}
	public override void CopyTo(Data toData)
	{
		if (!(toData is ButtonSettings to)) return;
		to.Clear();
		to.ButtonHSeperation = ButtonHSeperation;
		Font.CopyTo(to.Font);
		to.NormalFontColor = NormalFontColor;
		to.FocusFontColor = FocusFontColor;
		to.HoverFontColor = HoverFontColor;
		to.PressedFontColor = PressedFontColor;
		to.DisabledFontColor = DisabledFontColor;
		NormalStyleBox.CopyTo(to.NormalStyleBox);
		FocusStyleBox.CopyTo(to.FocusStyleBox);
		HoverStyleBox.CopyTo(to.HoverStyleBox);
		PressedStyleBox.CopyTo(to.PressedStyleBox);
		DisabledStyleBox.CopyTo(to.DisabledStyleBox);
	}
	public override void FieldCopyTo(Data toData, int field)
	{
		if (!(toData is ButtonSettings to)) return;
		switch(field)
		{
			case 0:to.ButtonHSeperation = ButtonHSeperation; return;
			case 1:Font.CopyTo(to.Font); return;
			case 2:to.NormalFontColor = NormalFontColor; return;
			case 3:to.FocusFontColor = FocusFontColor; return;
			case 4:to.HoverFontColor = HoverFontColor; return;
			case 5:to.PressedFontColor = PressedFontColor; return;
			case 6:to.DisabledFontColor = DisabledFontColor; return;
			case 7:NormalStyleBox.CopyTo(to.NormalStyleBox); return;
			case 8:FocusStyleBox.CopyTo(to.FocusStyleBox); return;
			case 9:HoverStyleBox.CopyTo(to.HoverStyleBox); return;
			case 10:PressedStyleBox.CopyTo(to.PressedStyleBox); return;
			case 11:DisabledStyleBox.CopyTo(to.DisabledStyleBox); return;
		}
	}
	public override void WriteToBuf(SerializationBuffer sb, bool append=false)
	{
		if (!append) sb.Clear();
		if (ButtonHSeperation != default)
		{
			sb.WriteSize(0);
			sb.Write(ButtonHSeperation);
		}
		if (!Font.IsDefault())
		{
			sb.WriteSize(1);
			Font.WriteToBuf(sb);
		}
		if (NormalFontColor != Colors.Black)
		{
			sb.WriteSize(2);
			sb.Write(NormalFontColor);
		}
		if (FocusFontColor != Colors.Black)
		{
			sb.WriteSize(3);
			sb.Write(FocusFontColor);
		}
		if (HoverFontColor != Colors.Black)
		{
			sb.WriteSize(4);
			sb.Write(HoverFontColor);
		}
		if (PressedFontColor != Colors.Black)
		{
			sb.WriteSize(5);
			sb.Write(PressedFontColor);
		}
		if (DisabledFontColor != Colors.Black)
		{
			sb.WriteSize(6);
			sb.Write(DisabledFontColor);
		}
		if (!NormalStyleBox.IsDefault())
		{
			sb.WriteSize(7);
			NormalStyleBox.WriteToBuf(sb);
		}
		if (!FocusStyleBox.IsDefault())
		{
			sb.WriteSize(8);
			FocusStyleBox.WriteToBuf(sb);
		}
		if (!HoverStyleBox.IsDefault())
		{
			sb.WriteSize(9);
			HoverStyleBox.WriteToBuf(sb);
		}
		if (!PressedStyleBox.IsDefault())
		{
			sb.WriteSize(10);
			PressedStyleBox.WriteToBuf(sb);
		}
		if (!DisabledStyleBox.IsDefault())
		{
			sb.WriteSize(11);
			DisabledStyleBox.WriteToBuf(sb);
		}
		sb.WriteSize(-1);
	}
	/// <summary>
	/// ReadFromBuf loads the data from the buffer into the object. 
	/// maxField is used by Table.Filter to only load the fields that are needed.
	/// </summary>
	public override void ReadFromBuf(SerializationBuffer sb, int maxField)
	{
		Clear();
		int fieldIndex;
		fieldIndex = sb.ReadSize();
		if (fieldIndex > maxField) return; 
		if (fieldIndex == 0)
		{
			sb.Read(out ButtonHSeperation);
			fieldIndex = sb.ReadSize();
			if (fieldIndex > maxField) return;
		}
		if (fieldIndex == 1)
		{
			Font.ReadFromBuf(sb);
			fieldIndex = sb.ReadSize();
			if (fieldIndex > maxField) return;
		}
		if (fieldIndex == 2)
		{
			sb.Read(out NormalFontColor);
			fieldIndex = sb.ReadSize();
			if (fieldIndex > maxField) return;
		}
		if (fieldIndex == 3)
		{
			sb.Read(out FocusFontColor);
			fieldIndex = sb.ReadSize();
			if (fieldIndex > maxField) return;
		}
		if (fieldIndex == 4)
		{
			sb.Read(out HoverFontColor);
			fieldIndex = sb.ReadSize();
			if (fieldIndex > maxField) return;
		}
		if (fieldIndex == 5)
		{
			sb.Read(out PressedFontColor);
			fieldIndex = sb.ReadSize();
			if (fieldIndex > maxField) return;
		}
		if (fieldIndex == 6)
		{
			sb.Read(out DisabledFontColor);
			fieldIndex = sb.ReadSize();
			if (fieldIndex > maxField) return;
		}
		if (fieldIndex == 7)
		{
			NormalStyleBox.ReadFromBuf(sb);
			fieldIndex = sb.ReadSize();
			if (fieldIndex > maxField) return;
		}
		if (fieldIndex == 8)
		{
			FocusStyleBox.ReadFromBuf(sb);
			fieldIndex = sb.ReadSize();
			if (fieldIndex > maxField) return;
		}
		if (fieldIndex == 9)
		{
			HoverStyleBox.ReadFromBuf(sb);
			fieldIndex = sb.ReadSize();
			if (fieldIndex > maxField) return;
		}
		if (fieldIndex == 10)
		{
			PressedStyleBox.ReadFromBuf(sb);
			fieldIndex = sb.ReadSize();
			if (fieldIndex > maxField) return;
		}
		if (fieldIndex == 11)
		{
			DisabledStyleBox.ReadFromBuf(sb);
			fieldIndex = sb.ReadSize();
			if (fieldIndex > maxField) return;
		}
		// no need to do OnLoad we are in a filter
	}
	/// <summary>
	/// ReadFromBuf loads the data from the buffer into the object. 
	/// </summary>
	public override void ReadFromBuf(SerializationBuffer sb)
	{
		Clear();
		int fieldIndex;
		fieldIndex = sb.ReadSize();
		if (fieldIndex == 0)
		{
			sb.Read(out ButtonHSeperation);
			fieldIndex = sb.ReadSize();
		}
		if (fieldIndex == 1)
		{
			Font.ReadFromBuf(sb);
			fieldIndex = sb.ReadSize();
		}
		if (fieldIndex == 2)
		{
			sb.Read(out NormalFontColor);
			fieldIndex = sb.ReadSize();
		}
		if (fieldIndex == 3)
		{
			sb.Read(out FocusFontColor);
			fieldIndex = sb.ReadSize();
		}
		if (fieldIndex == 4)
		{
			sb.Read(out HoverFontColor);
			fieldIndex = sb.ReadSize();
		}
		if (fieldIndex == 5)
		{
			sb.Read(out PressedFontColor);
			fieldIndex = sb.ReadSize();
		}
		if (fieldIndex == 6)
		{
			sb.Read(out DisabledFontColor);
			fieldIndex = sb.ReadSize();
		}
		if (fieldIndex == 7)
		{
			NormalStyleBox.ReadFromBuf(sb);
			fieldIndex = sb.ReadSize();
		}
		if (fieldIndex == 8)
		{
			FocusStyleBox.ReadFromBuf(sb);
			fieldIndex = sb.ReadSize();
		}
		if (fieldIndex == 9)
		{
			HoverStyleBox.ReadFromBuf(sb);
			fieldIndex = sb.ReadSize();
		}
		if (fieldIndex == 10)
		{
			PressedStyleBox.ReadFromBuf(sb);
			fieldIndex = sb.ReadSize();
		}
		if (fieldIndex == 11)
		{
			DisabledStyleBox.ReadFromBuf(sb);
			fieldIndex = sb.ReadSize();
		}
		OnLoad();
	}
	public override bool FieldIsDefault(int field)
	{
		switch(field)
		{
			case 0:return ButtonHSeperation == default;
			case 1:return Font.IsDefault();
			case 2:return NormalFontColor == Colors.Black;
			case 3:return FocusFontColor == Colors.Black;
			case 4:return HoverFontColor == Colors.Black;
			case 5:return PressedFontColor == Colors.Black;
			case 6:return DisabledFontColor == Colors.Black;
			case 7:return NormalStyleBox.IsDefault();
			case 8:return FocusStyleBox.IsDefault();
			case 9:return HoverStyleBox.IsDefault();
			case 10:return PressedStyleBox.IsDefault();
			case 11:return DisabledStyleBox.IsDefault();
		}
		return false;
	}
	public override bool FieldIsEqual(Data toFld, int field)
	{
		if (!(toFld is ButtonSettings to)) return false;
		switch(field)
		{
			case 0:return ButtonHSeperation == to.ButtonHSeperation;
			case 1:return Font.IsEqualTo(to.Font);
			case 2:return NormalFontColor == to.NormalFontColor;
			case 3:return FocusFontColor == to.FocusFontColor;
			case 4:return HoverFontColor == to.HoverFontColor;
			case 5:return PressedFontColor == to.PressedFontColor;
			case 6:return DisabledFontColor == to.DisabledFontColor;
			case 7:return NormalStyleBox.IsEqualTo(to.NormalStyleBox);
			case 8:return FocusStyleBox.IsEqualTo(to.FocusStyleBox);
			case 9:return HoverStyleBox.IsEqualTo(to.HoverStyleBox);
			case 10:return PressedStyleBox.IsEqualTo(to.PressedStyleBox);
			case 11:return DisabledStyleBox.IsEqualTo(to.DisabledStyleBox);
		}
		return false;
	}
	public override string FieldAsString(int field)
	{
		switch(field)
		{
			case 0:return ButtonHSeperation.AsString();
			case 1:return Font.AsString();
			case 2:return NormalFontColor.AsString();
			case 3:return FocusFontColor.AsString();
			case 4:return HoverFontColor.AsString();
			case 5:return PressedFontColor.AsString();
			case 6:return DisabledFontColor.AsString();
			case 7:return NormalStyleBox.AsString();
			case 8:return FocusStyleBox.AsString();
			case 9:return HoverStyleBox.AsString();
			case 10:return PressedStyleBox.AsString();
			case 11:return DisabledStyleBox.AsString();
		}
		return string.Empty;
	}
	public override void FieldFromString(string str, int field)
	{
		switch(field)
		{
			case 0:ButtonHSeperation = str.AsInt(); return;
			case 1:Font.FromString(str); return;
			case 2:NormalFontColor = str.AsColor(); return;
			case 3:FocusFontColor = str.AsColor(); return;
			case 4:HoverFontColor = str.AsColor(); return;
			case 5:PressedFontColor = str.AsColor(); return;
			case 6:DisabledFontColor = str.AsColor(); return;
			case 7:NormalStyleBox.FromString(str); return;
			case 8:FocusStyleBox.FromString(str); return;
			case 9:HoverStyleBox.FromString(str); return;
			case 10:PressedStyleBox.FromString(str); return;
			case 11:DisabledStyleBox.FromString(str); return;
		}
		return;
	}
	public override string FieldName(int field)
	{
		if (field < 0 || field >= FieldCount) return string.Empty;
		return FieldNames[field];
	}
	public override string FieldLabel(int field)
	{
		if (field < 0 || field >= FieldCount) return string.Empty;
		return FieldLabels[field];
	}
	public override void FieldLabelSet(int field, string label)
	{
		if (field < 0 || field >= FieldCount) return;
		FieldLabels[field] = label;
	}
	public override string FieldColumnLabel(int field)
	{
		if (field < 0 || field >= FieldCount) return string.Empty;
		return ColumnLabels[field];
	}
	public override void FieldColumnLabelSet(int field, string label)
	{
		if (field < 0 || field >= FieldCount) return;
		ColumnLabels[field] = label;
	}
	public override void FieldMinSet(int field, object min)
	{
		if (field < 0 || field >= FieldCount) return;
		Min[field] = min;
	}
	public override object FieldMin(int field)
	{
		if (field < 0 || field >= FieldCount) return 0;
		return Min[field];
	}
	public override void FieldMaxSet(int field, object max)
	{
		if (field < 0 || field >= FieldCount) return;
		Max[field] = max;
	}
	public override object FieldMax(int field)
	{
		if (field < 0 || field >= FieldCount) return 0;
		return Max[field];
	}
	public override int FieldIdFromName(string name)
	{
		if (FieldIdLookup.TryGetValue(name, out int id)) return id;
		return -1;
	}
	/// <summary>
	/// Writes to sb the field formated as a key.
	/// maxSize is used for strings only.
	/// </summary>
	public override void FieldAsKey(int field, SerializationBuffer sb, int maxSize)
	{
		switch(field)
		{
			case 0:sb.Write(ButtonHSeperation); return;
			case 1:return; // DataField as key is not supported
			case 2:sb.Write(NormalFontColor); return;
			case 3:sb.Write(FocusFontColor); return;
			case 4:sb.Write(HoverFontColor); return;
			case 5:sb.Write(PressedFontColor); return;
			case 6:sb.Write(DisabledFontColor); return;
			case 7:return; // DataField as key is not supported
			case 8:return; // DataField as key is not supported
			case 9:return; // DataField as key is not supported
			case 10:return; // DataField as key is not supported
			case 11:return; // DataField as key is not supported
		}
	}
	/// <summary>
	/// Returns the field as an object.
	/// </summary>
	public override Object FieldAsObject(int field)
	{
		switch(field)
		{
			case 0:return (Object)ButtonHSeperation;
			case 1:return (Object)Font;
			case 2:return (Object)NormalFontColor;
			case 3:return (Object)FocusFontColor;
			case 4:return (Object)HoverFontColor;
			case 5:return (Object)PressedFontColor;
			case 6:return (Object)DisabledFontColor;
			case 7:return (Object)NormalStyleBox;
			case 8:return (Object)FocusStyleBox;
			case 9:return (Object)HoverStyleBox;
			case 10:return (Object)PressedStyleBox;
			case 11:return (Object)DisabledStyleBox;
		}
		return null;
	}
	/// <summary>
	/// Sets the field to an object.
	/// </summary>
	public override void FieldFromObject(Object o,  int field)
	{
		switch(field)
		{
			case 0:ButtonHSeperation = (int) o; return;
			case 1:Font = (FontSettings.DataField) o; return;
			case 2:NormalFontColor = (Color) o; return;
			case 3:FocusFontColor = (Color) o; return;
			case 4:HoverFontColor = (Color) o; return;
			case 5:PressedFontColor = (Color) o; return;
			case 6:DisabledFontColor = (Color) o; return;
			case 7:NormalStyleBox = (StyleBoxSettings.DataField) o; return;
			case 8:FocusStyleBox = (StyleBoxSettings.DataField) o; return;
			case 9:HoverStyleBox = (StyleBoxSettings.DataField) o; return;
			case 10:PressedStyleBox = (StyleBoxSettings.DataField) o; return;
			case 11:DisabledStyleBox = (StyleBoxSettings.DataField) o; return;
		}
	}
	/// <summary>
	/// Returns the field Type.
	/// </summary>
	public override Type FieldType(int field)
	{
		switch(field)
		{
			case 0:return ButtonHSeperation.GetType();
			case 1:return Font.GetType();
			case 2:return NormalFontColor.GetType();
			case 3:return FocusFontColor.GetType();
			case 4:return HoverFontColor.GetType();
			case 5:return PressedFontColor.GetType();
			case 6:return DisabledFontColor.GetType();
			case 7:return NormalStyleBox.GetType();
			case 8:return FocusStyleBox.GetType();
			case 9:return HoverStyleBox.GetType();
			case 10:return PressedStyleBox.GetType();
			case 11:return DisabledStyleBox.GetType();
		}
		return null;
	}
	public partial class Context : DataContext<ButtonSettings>
	{
		protected override void OnBaseConstruct()
		{
			Data = DataFactory<ButtonSettings>.Rent();
		}
		public static Context Rent() => (Context) DataContextFactory<ButtonSettings>.Rent();
		public override void Dispose()
		{
			DataContextFactory<ButtonSettings>.Return(this);
		}
	}
	public static class FID
	{
		public const int ButtonHSeperation = 0;
		public const int Font = 1;
		public const int NormalFontColor = 2;
		public const int FocusFontColor = 3;
		public const int HoverFontColor = 4;
		public const int PressedFontColor = 5;
		public const int DisabledFontColor = 6;
		public const int NormalStyleBox = 7;
		public const int FocusStyleBox = 8;
		public const int HoverStyleBox = 9;
		public const int PressedStyleBox = 10;
		public const int DisabledStyleBox = 11;
	}
	static object[] Min = { (int) -2147483648,(int) 0,(int) 0,(int) 0,(int) 0,(int) 0,(int) 0,(int) 0,(int) 0,(int) 0,(int) 0,(int) 0, };
	static object[] Max = { (int) 2147483647,(int) 0,(int) 0,(int) 0,(int) 0,(int) 0,(int) 0,(int) 0,(int) 0,(int) 0,(int) 0,(int) 0, };
	static string[] FieldLabels =
	{
		"Button H Seperation",
		"Font",
		"Normal Font Color",
		"Focus Font Color",
		"Hover Font Color",
		"Pressed Font Color",
		"Disabled Font Color",
		"Normal Style Box",
		"Focus Style Box",
		"Hover Style Box",
		"Pressed Style Box",
		"Disabled Style Box",
	};
	static string[] ColumnLabels =
	{
		"Button H Seperation",
		"Font",
		"Normal Font Color",
		"Focus Font Color",
		"Hover Font Color",
		"Pressed Font Color",
		"Disabled Font Color",
		"Normal Style Box",
		"Focus Style Box",
		"Hover Style Box",
		"Pressed Style Box",
		"Disabled Style Box",
	};
	static Dictionary<string, int> FieldIdLookup = new()
	{
		{ "ButtonHSeperation", 0 },
		{ "Font", 1 },
		{ "NormalFontColor", 2 },
		{ "FocusFontColor", 3 },
		{ "HoverFontColor", 4 },
		{ "PressedFontColor", 5 },
		{ "DisabledFontColor", 6 },
		{ "NormalStyleBox", 7 },
		{ "FocusStyleBox", 8 },
		{ "HoverStyleBox", 9 },
		{ "PressedStyleBox", 10 },
		{ "DisabledStyleBox", 11 },
	};
	static string[] FieldNames =
	{
		"ButtonHSeperation",
		"Font",
		"NormalFontColor",
		"FocusFontColor",
		"HoverFontColor",
		"PressedFontColor",
		"DisabledFontColor",
		"NormalStyleBox",
		"FocusStyleBox",
		"HoverStyleBox",
		"PressedStyleBox",
		"DisabledStyleBox",
	};
	static string[] TypeNames =
	{
		"int",
		"DataField",
		"Color",
		"Color",
		"Color",
		"Color",
		"Color",
		"DataField",
		"DataField",
		"DataField",
		"DataField",
		"DataField",
	};
	public override string[] StaticTypeNames => TypeNames;
	static List<ValidationFunc>[] ValidationFuncs = new List<ValidationFunc>[12];
	public override List<ValidationFunc>[] StaticValidationFuncs => ValidationFuncs;
	public partial class Util : DataUtil<ButtonSettings>
	{
	}
}
