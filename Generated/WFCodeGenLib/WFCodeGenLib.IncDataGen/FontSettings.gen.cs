/// <auto-generated/>
using WFLib;
using Godot;
using System;
namespace WFCodeGen;
public partial class FontSettings : Data
{
	protected override void OnBaseConstruct()
	{
		Init();
	}
	public override int FieldCount => 3;
	public FontSettings Rent()=>DataFactory<FontSettings>.Rent();
	~FontSettings() => Dispose();
	public override void Dispose()
	{
		DataFactory<FontSettings>.Return(this);
		base.Dispose();
	}
	public override bool IsRecord => false;
	public partial class DataField : DataField<FontSettings>
	{
		public DataField(int field)
		{
			Field=field;
		}
		public string FontName => Data.FontName;
		public int FontSize => Data.FontSize;
		public Godot.Color FontColor => Data.FontColor;
	}
	public override void Clear()
	{
		FontName = string.Empty;
		FontSize = 0;
		FontColor = Godot.Colors.Black;
		OnClear();
	}
	public override void Init()
	{
		FontName = string.Empty;
		FontSize = 18;
		FontColor = Colors.White;
		OnInitialize();
	}
	public override void CopyTo(Data toData)
	{
		if (!(toData is FontSettings to)) return;
		to.Clear();
		to.FontName = FontName;
		to.FontSize = FontSize;
		to.FontColor = FontColor;
	}
	public override void FieldCopyTo(Data toData, int field)
	{
		if (!(toData is FontSettings to)) return;
		switch(field)
		{
			case 0:to.FontName = FontName; return;
			case 1:to.FontSize = FontSize; return;
			case 2:to.FontColor = FontColor; return;
		}
	}
	public override void WriteToBuf(SerializationBuffer sb, bool append=false)
	{
		if (!append) sb.Clear();
		if (FontName != default)
		{
			sb.WriteSize(0);
			sb.Write(FontName);
		}
		if (FontSize != default)
		{
			sb.WriteSize(1);
			sb.Write(FontSize);
		}
		if (FontColor != Colors.Black)
		{
			sb.WriteSize(2);
			sb.Write(FontColor);
		}
		sb.WriteSize(-1);
	}
	/// <summary>
	/// ReadFromBuf loads the data from the buffer into the object. 
	/// maxField is used by Table.Filter to only load the fields that are needed.
	/// </summary>
	public override void ReadFromBuf(SerializationBuffer sb, int maxField)
	{
		Clear();
		int fieldIndex;
		fieldIndex = sb.ReadSize();
		if (fieldIndex > maxField) return; 
		if (fieldIndex == 0)
		{
			sb.Read(out FontName);
			fieldIndex = sb.ReadSize();
			if (fieldIndex > maxField) return;
		}
		if (fieldIndex == 1)
		{
			sb.Read(out FontSize);
			fieldIndex = sb.ReadSize();
			if (fieldIndex > maxField) return;
		}
		if (fieldIndex == 2)
		{
			sb.Read(out FontColor);
			fieldIndex = sb.ReadSize();
			if (fieldIndex > maxField) return;
		}
		// no need to do OnLoad we are in a filter
	}
	/// <summary>
	/// ReadFromBuf loads the data from the buffer into the object. 
	/// </summary>
	public override void ReadFromBuf(SerializationBuffer sb)
	{
		Clear();
		int fieldIndex;
		fieldIndex = sb.ReadSize();
		if (fieldIndex == 0)
		{
			sb.Read(out FontName);
			fieldIndex = sb.ReadSize();
		}
		if (fieldIndex == 1)
		{
			sb.Read(out FontSize);
			fieldIndex = sb.ReadSize();
		}
		if (fieldIndex == 2)
		{
			sb.Read(out FontColor);
			fieldIndex = sb.ReadSize();
		}
		OnLoad();
	}
	public override bool FieldIsDefault(int field)
	{
		switch(field)
		{
			case 0:return FontName == string.Empty;
			case 1:return FontSize == default;
			case 2:return FontColor == Colors.Black;
		}
		return false;
	}
	public override bool FieldIsEqual(Data toFld, int field)
	{
		if (!(toFld is FontSettings to)) return false;
		switch(field)
		{
			case 0:return FontName == to.FontName;
			case 1:return FontSize == to.FontSize;
			case 2:return FontColor == to.FontColor;
		}
		return false;
	}
	public override string FieldAsString(int field)
	{
		switch(field)
		{
			case 0:return FontName;
			case 1:return FontSize.AsString();
			case 2:return FontColor.AsString();
		}
		return string.Empty;
	}
	public override void FieldFromString(string str, int field)
	{
		switch(field)
		{
			case 0:FontName = str; return;
			case 1:FontSize = str.AsInt(); return;
			case 2:FontColor = str.AsColor(); return;
		}
		return;
	}
	public override string FieldName(int field)
	{
		if (field < 0 || field >= FieldCount) return string.Empty;
		return FieldNames[field];
	}
	public override string FieldLabel(int field)
	{
		if (field < 0 || field >= FieldCount) return string.Empty;
		return FieldLabels[field];
	}
	public override void FieldLabelSet(int field, string label)
	{
		if (field < 0 || field >= FieldCount) return;
		FieldLabels[field] = label;
	}
	public override string FieldColumnLabel(int field)
	{
		if (field < 0 || field >= FieldCount) return string.Empty;
		return ColumnLabels[field];
	}
	public override void FieldColumnLabelSet(int field, string label)
	{
		if (field < 0 || field >= FieldCount) return;
		ColumnLabels[field] = label;
	}
	public override void FieldMinSet(int field, object min)
	{
		if (field < 0 || field >= FieldCount) return;
		Min[field] = min;
	}
	public override object FieldMin(int field)
	{
		if (field < 0 || field >= FieldCount) return 0;
		return Min[field];
	}
	public override void FieldMaxSet(int field, object max)
	{
		if (field < 0 || field >= FieldCount) return;
		Max[field] = max;
	}
	public override object FieldMax(int field)
	{
		if (field < 0 || field >= FieldCount) return 0;
		return Max[field];
	}
	public override int FieldIdFromName(string name)
	{
		if (FieldIdLookup.TryGetValue(name, out int id)) return id;
		return -1;
	}
	/// <summary>
	/// Writes to sb the field formated as a key.
	/// maxSize is used for strings only.
	/// </summary>
	public override void FieldAsKey(int field, SerializationBuffer sb, int maxSize)
	{
		switch(field)
		{
			case 0:FontName.AsKey(sb, maxSize); return;
			case 1:sb.Write(FontSize); return;
			case 2:sb.Write(FontColor); return;
		}
	}
	/// <summary>
	/// Returns the field as an object.
	/// </summary>
	public override Object FieldAsObject(int field)
	{
		switch(field)
		{
			case 0:return (Object)FontName;
			case 1:return (Object)FontSize;
			case 2:return (Object)FontColor;
		}
		return null;
	}
	/// <summary>
	/// Sets the field to an object.
	/// </summary>
	public override void FieldFromObject(Object o,  int field)
	{
		switch(field)
		{
			case 0:FontName = (string) o; return;
			case 1:FontSize = (int) o; return;
			case 2:FontColor = (Color) o; return;
		}
	}
	/// <summary>
	/// Returns the field Type.
	/// </summary>
	public override Type FieldType(int field)
	{
		switch(field)
		{
			case 0:return FontName.GetType();
			case 1:return FontSize.GetType();
			case 2:return FontColor.GetType();
		}
		return null;
	}
	public partial class Context : DataContext<FontSettings>
	{
		protected override void OnBaseConstruct()
		{
			Data = DataFactory<FontSettings>.Rent();
		}
		public static Context Rent() => (Context) DataContextFactory<FontSettings>.Rent();
		public override void Dispose()
		{
			DataContextFactory<FontSettings>.Return(this);
		}
	}
	public static class FID
	{
		public const int FontName = 0;
		public const int FontSize = 1;
		public const int FontColor = 2;
	}
	static object[] Min = { (int) 0,(int) -2147483648,(int) 0, };
	static object[] Max = { (int) 0,(int) 2147483647,(int) 0, };
	static string[] FieldLabels =
	{
		"Font Name",
		"Font Size",
		"Font Color",
	};
	static string[] ColumnLabels =
	{
		"Font Name",
		"Font Size",
		"Font Color",
	};
	static Dictionary<string, int> FieldIdLookup = new()
	{
		{ "FontName", 0 },
		{ "FontSize", 1 },
		{ "FontColor", 2 },
	};
	static string[] FieldNames =
	{
		"FontName",
		"FontSize",
		"FontColor",
	};
	static string[] TypeNames =
	{
		"string",
		"int",
		"Color",
	};
	public override string[] StaticTypeNames => TypeNames;
	static List<ValidationFunc>[] ValidationFuncs = new List<ValidationFunc>[3];
	public override List<ValidationFunc>[] StaticValidationFuncs => ValidationFuncs;
	public partial class Util : DataUtil<FontSettings>
	{
	}
}
