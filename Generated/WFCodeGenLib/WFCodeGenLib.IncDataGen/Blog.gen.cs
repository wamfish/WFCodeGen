/// <auto-generated/>
using WFLib;
using Godot;
using System;
namespace WFCodeGen;
public partial class Blog : Record
{
	protected override void OnBaseConstruct()
	{
		Init();
	}
	public override int FieldCount => 10;
	public Blog Rent()=>RecordFactory<Blog>.Rent();
	public override void InitContextFactory()
	{
		Context.InitContextFactory();
	}
	~Blog() => Dispose();
	public override void Dispose()
	{
		RecordFactory<Blog>.Return(this);
		base.Dispose();
	}
	public override bool IsRecord => true;
	public override void Clear()
	{
		StatusCode = 0;
		ID = 0;
		Timestamp = DateTime.MinValue;
		EditByID = 0;
		Title = string.Empty;
		Html = string.Empty;
		Tags = string.Empty;
		IsPublished = false;
		StartDate = DateTime.MinValue;
		StopDate = DateTime.MinValue;
		OnClear();
	}
	public override void Init()
	{
		StatusCode = 0;
		ID = 0;
		Timestamp = DateTime.MinValue;
		EditByID = 0;
		Title = string.Empty;
		Html = string.Empty;
		Tags = string.Empty;
		IsPublished = false;
		StartDate = DateTime.MinValue;
		StopDate = DateTime.MinValue;
		OnInitialize();
	}
	public override void CopyTo(Data toData)
	{
		if (!(toData is Blog to)) return;
		to.Clear();
		to.StatusCode = StatusCode;
		to.ID = ID;
		to.Timestamp = Timestamp;
		to.EditByID = EditByID;
		to.Title = Title;
		to.Html = Html;
		to.Tags = Tags;
		to.IsPublished = IsPublished;
		to.StartDate = StartDate;
		to.StopDate = StopDate;
	}
	public override void FieldCopyTo(Data toData, int field)
	{
		if (!(toData is Blog to)) return;
		switch(field)
		{
			case 0:to.StatusCode = StatusCode; return;
			case 1:to.ID = ID; return;
			case 2:to.Timestamp = Timestamp; return;
			case 3:to.EditByID = EditByID; return;
			case 4:to.Title = Title; return;
			case 5:to.Html = Html; return;
			case 6:to.Tags = Tags; return;
			case 7:to.IsPublished = IsPublished; return;
			case 8:to.StartDate = StartDate; return;
			case 9:to.StopDate = StopDate; return;
		}
	}
	public override void WriteToBuf(SerializationBuffer sb, bool append=false)
	{
		if (!append) sb.Clear();
		sb.Write(StatusCode);
		sb.Write(ID);
		sb.Write(Timestamp);
		sb.Write(EditByID);
		if (Title != default)
		{
			sb.WriteSize(4);
			sb.Write(Title);
		}
		if (Html != default)
		{
			sb.WriteSize(5);
			sb.Write(Html);
		}
		if (Tags != default)
		{
			sb.WriteSize(6);
			sb.Write(Tags);
		}
		if (IsPublished != default)
		{
			sb.WriteSize(7);
			sb.Write(IsPublished);
		}
		if (StartDate != default)
		{
			sb.WriteSize(8);
			sb.Write(StartDate);
		}
		if (StopDate != default)
		{
			sb.WriteSize(9);
			sb.Write(StopDate);
		}
		sb.WriteSize(-1);
	}
	/// <summary>
	/// ReadFromBuf loads the data from the buffer into the object. 
	/// maxField is used by Table.Filter to only load the fields that are needed.
	/// </summary>
	public override void ReadFromBuf(SerializationBuffer sb, int maxField)
	{
		Clear();
		int fieldIndex;
		StatusCode = sb.ReadByte();
		ID = sb.ReadInt();
		if (maxField < 2) return; // no need to do OnLoad we are in a filter
		Timestamp = sb.ReadDateTime();
		if (maxField < 3) return; // no need to do OnLoad we are in a filter
		EditByID = sb.ReadInt();
		fieldIndex = sb.ReadSize();
		if (fieldIndex > maxField) return; 
		if (fieldIndex == 4)
		{
			sb.Read(out Title);
			fieldIndex = sb.ReadSize();
			if (fieldIndex > maxField) return;
		}
		if (fieldIndex == 5)
		{
			sb.Read(out Html);
			fieldIndex = sb.ReadSize();
			if (fieldIndex > maxField) return;
		}
		if (fieldIndex == 6)
		{
			sb.Read(out Tags);
			fieldIndex = sb.ReadSize();
			if (fieldIndex > maxField) return;
		}
		if (fieldIndex == 7)
		{
			sb.Read(out IsPublished);
			fieldIndex = sb.ReadSize();
			if (fieldIndex > maxField) return;
		}
		if (fieldIndex == 8)
		{
			sb.Read(out StartDate);
			fieldIndex = sb.ReadSize();
			if (fieldIndex > maxField) return;
		}
		if (fieldIndex == 9)
		{
			sb.Read(out StopDate);
			fieldIndex = sb.ReadSize();
			if (fieldIndex > maxField) return;
		}
		// no need to do OnLoad we are in a filter
	}
	/// <summary>
	/// ReadFromBuf loads the data from the buffer into the object. 
	/// </summary>
	public override void ReadFromBuf(SerializationBuffer sb)
	{
		Clear();
		int fieldIndex;
		StatusCode = sb.ReadByte();
		ID = sb.ReadInt();
		Timestamp = sb.ReadDateTime();
		EditByID = sb.ReadInt();
		fieldIndex = sb.ReadSize();
		if (fieldIndex == 4)
		{
			sb.Read(out Title);
			fieldIndex = sb.ReadSize();
		}
		if (fieldIndex == 5)
		{
			sb.Read(out Html);
			fieldIndex = sb.ReadSize();
		}
		if (fieldIndex == 6)
		{
			sb.Read(out Tags);
			fieldIndex = sb.ReadSize();
		}
		if (fieldIndex == 7)
		{
			sb.Read(out IsPublished);
			fieldIndex = sb.ReadSize();
		}
		if (fieldIndex == 8)
		{
			sb.Read(out StartDate);
			fieldIndex = sb.ReadSize();
		}
		if (fieldIndex == 9)
		{
			sb.Read(out StopDate);
			fieldIndex = sb.ReadSize();
		}
		OnLoad();
	}
	public override bool FieldIsDefault(int field)
	{
		switch(field)
		{
			case 0:return StatusCode == default;
			case 1:return ID == default;
			case 2:return Timestamp == default;
			case 3:return EditByID == default;
			case 4:return Title == string.Empty;
			case 5:return Html == string.Empty;
			case 6:return Tags == string.Empty;
			case 7:return IsPublished == default;
			case 8:return StartDate == default;
			case 9:return StopDate == default;
		}
		return false;
	}
	public override bool FieldIsEqual(Data toFld, int field)
	{
		if (!(toFld is Blog to)) return false;
		switch(field)
		{
			case 0:return StatusCode == to.StatusCode;
			case 1:return ID == to.ID;
			case 2:return Timestamp == to.Timestamp;
			case 3:return EditByID == to.EditByID;
			case 4:return Title == to.Title;
			case 5:return Html == to.Html;
			case 6:return Tags == to.Tags;
			case 7:return IsPublished == to.IsPublished;
			case 8:return StartDate == to.StartDate;
			case 9:return StopDate == to.StopDate;
		}
		return false;
	}
	public override string FieldAsString(int field)
	{
		switch(field)
		{
			case 0:return StatusCode.AsString();
			case 1:return ID.AsString();
			case 2:return Timestamp.AsString();
			case 3:return EditByID.AsString();
			case 4:return Title;
			case 5:return Html;
			case 6:return Tags;
			case 7:return IsPublished.AsString();
			case 8:return StartDate.AsString();
			case 9:return StopDate.AsString();
		}
		return string.Empty;
	}
	public override void FieldFromString(string str, int field)
	{
		switch(field)
		{
			case 0:StatusCode = str.AsByte(); return;
			case 1:ID = str.AsInt(); return;
			case 2:Timestamp = str.AsDateTime(); return;
			case 3:EditByID = str.AsInt(); return;
			case 4:Title = str; return;
			case 5:Html = str; return;
			case 6:Tags = str; return;
			case 7:IsPublished = str.AsBool(); return;
			case 8:StartDate = str.AsDateTime(); return;
			case 9:StopDate = str.AsDateTime(); return;
		}
		return;
	}
	public override string FieldName(int field)
	{
		if (field < 0 || field >= FieldCount) return string.Empty;
		return FieldNames[field];
	}
	public override string FieldLabel(int field)
	{
		if (field < 0 || field >= FieldCount) return string.Empty;
		return FieldLabels[field];
	}
	public override void FieldLabelSet(int field, string label)
	{
		if (field < 0 || field >= FieldCount) return;
		FieldLabels[field] = label;
	}
	public override string FieldColumnLabel(int field)
	{
		if (field < 0 || field >= FieldCount) return string.Empty;
		return ColumnLabels[field];
	}
	public override void FieldColumnLabelSet(int field, string label)
	{
		if (field < 0 || field >= FieldCount) return;
		ColumnLabels[field] = label;
	}
	public override void FieldMinSet(int field, object min)
	{
		if (field < 0 || field >= FieldCount) return;
		Min[field] = min;
	}
	public override object FieldMin(int field)
	{
		if (field < 0 || field >= FieldCount) return 0;
		return Min[field];
	}
	public override void FieldMaxSet(int field, object max)
	{
		if (field < 0 || field >= FieldCount) return;
		Max[field] = max;
	}
	public override object FieldMax(int field)
	{
		if (field < 0 || field >= FieldCount) return 0;
		return Max[field];
	}
	public override int FieldIdFromName(string name)
	{
		if (FieldIdLookup.TryGetValue(name, out int id)) return id;
		return -1;
	}
	/// <summary>
	/// Writes to sb the field formated as a key.
	/// maxSize is used for strings only.
	/// </summary>
	public override void FieldAsKey(int field, SerializationBuffer sb, int maxSize)
	{
		switch(field)
		{
			case 0:sb.Write(StatusCode); return;
			case 1:sb.Write(ID); return;
			case 2:sb.Write(Timestamp); return;
			case 3:sb.Write(EditByID); return;
			case 4:Title.AsKey(sb, maxSize); return;
			case 5:Html.AsKey(sb, maxSize); return;
			case 6:Tags.AsKey(sb, maxSize); return;
			case 7:sb.Write(IsPublished); return;
			case 8:sb.Write(StartDate); return;
			case 9:sb.Write(StopDate); return;
		}
	}
	/// <summary>
	/// Returns the field as an object.
	/// </summary>
	public override Object FieldAsObject(int field)
	{
		switch(field)
		{
			case 0:return (Object)StatusCode;
			case 1:return (Object)ID;
			case 2:return (Object)Timestamp;
			case 3:return (Object)EditByID;
			case 4:return (Object)Title;
			case 5:return (Object)Html;
			case 6:return (Object)Tags;
			case 7:return (Object)IsPublished;
			case 8:return (Object)StartDate;
			case 9:return (Object)StopDate;
		}
		return null;
	}
	/// <summary>
	/// Sets the field to an object.
	/// </summary>
	public override void FieldFromObject(Object o,  int field)
	{
		switch(field)
		{
			case 0:StatusCode = (byte) o; return;
			case 1:ID = (int) o; return;
			case 2:Timestamp = (DateTime) o; return;
			case 3:EditByID = (int) o; return;
			case 4:Title = (string) o; return;
			case 5:Html = (string) o; return;
			case 6:Tags = (string) o; return;
			case 7:IsPublished = (bool) o; return;
			case 8:StartDate = (DateTime) o; return;
			case 9:StopDate = (DateTime) o; return;
		}
	}
	/// <summary>
	/// Returns the field Type.
	/// </summary>
	public override Type FieldType(int field)
	{
		switch(field)
		{
			case 0:return StatusCode.GetType();
			case 1:return ID.GetType();
			case 2:return Timestamp.GetType();
			case 3:return EditByID.GetType();
			case 4:return Title.GetType();
			case 5:return Html.GetType();
			case 6:return Tags.GetType();
			case 7:return IsPublished.GetType();
			case 8:return StartDate.GetType();
			case 9:return StopDate.GetType();
		}
		return null;
	}
	public partial class Context : RecordContext<Blog>
	{
		protected override void OnBaseConstruct()
		{
			table = TableFactory<Table,Blog>.Rent();
		}
		internal static void InitContextFactory() => RecordContextFactory<Blog>.SetCreateMethod(()=>new Context(),_setEditById);
		static Context()
		{
			InitContextFactory();
		}
		public static Context Rent(int EditByID=-2) => (Context) RecordContextFactory<Blog>.Rent(EditByID);
		public override Table Table => (Table) table;
		public override void Dispose()
		{
			RecordContextFactory<Blog>.Return(this);
		}
	}
	public static class FID
	{
		public const int StatusCode = 0;
		public const int ID = 1;
		public const int Timestamp = 2;
		public const int EditByID = 3;
		public const int Title = 4;
		public const int Html = 5;
		public const int Tags = 6;
		public const int IsPublished = 7;
		public const int StartDate = 8;
		public const int StopDate = 9;
	}
	static object[] Min = { (byte) 0,(int) -2147483648,(long) 0,(int) -2147483648,(int) 0,(int) 0,(int) 0,(int) 0,(long) 0,(long) 0, };
	static object[] Max = { (byte) 255,(int) 2147483647,(long) 3155378975999999999,(int) 2147483647,(int) 0,(int) 0,(int) 0,(int) 0,(long) 3155378975999999999,(long) 3155378975999999999, };
	static string[] FieldLabels =
	{
		"Status Code",
		"ID",
		"Timestamp",
		"Edit By ID",
		"Title",
		"Html",
		"Tags",
		"Is Published",
		"Start Date",
		"Stop Date",
	};
	static string[] ColumnLabels =
	{
		"Status Code",
		"ID",
		"Timestamp",
		"Edit By ID",
		"Title",
		"Html",
		"Tags",
		"Is Published",
		"Start Date",
		"Stop Date",
	};
	static Dictionary<string, int> FieldIdLookup = new()
	{
		{ "StatusCode", 0 },
		{ "ID", 1 },
		{ "Timestamp", 2 },
		{ "EditByID", 3 },
		{ "Title", 4 },
		{ "Html", 5 },
		{ "Tags", 6 },
		{ "IsPublished", 7 },
		{ "StartDate", 8 },
		{ "StopDate", 9 },
	};
	static string[] FieldNames =
	{
		"StatusCode",
		"ID",
		"Timestamp",
		"EditByID",
		"Title",
		"Html",
		"Tags",
		"IsPublished",
		"StartDate",
		"StopDate",
	};
	static string[] TypeNames =
	{
		"byte",
		"int",
		"DateTime",
		"int",
		"string",
		"string",
		"string",
		"bool",
		"DateTime",
		"DateTime",
	};
	public override string[] StaticTypeNames => TypeNames;
	static List<ValidationFunc>[] ValidationFuncs = new List<ValidationFunc>[10];
	public override List<ValidationFunc>[] StaticValidationFuncs => ValidationFuncs;
	public partial class Util : RecordUtil<Blog>
	{
	}
	public partial class Table : Table<Blog>
	{
	}
}
