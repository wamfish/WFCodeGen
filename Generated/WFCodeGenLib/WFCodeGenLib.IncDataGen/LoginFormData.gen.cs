/// <auto-generated/>
using WFLib;
using Godot;
using System;
namespace WFCodeGen;
public partial class LoginFormData : Data
{
	protected override void OnBaseConstruct()
	{
		Init();
	}
	public override int FieldCount => 4;
	public LoginFormData Rent()=>DataFactory<LoginFormData>.Rent();
	~LoginFormData() => Dispose();
	public override void Dispose()
	{
		DataFactory<LoginFormData>.Return(this);
		base.Dispose();
	}
	public override bool IsRecord => false;
	public partial class DataField : DataField<LoginFormData>
	{
		public DataField(int field)
		{
			Field=field;
		}
		public string UserGUID => Data.UserGUID;
		public string Nickname => Data.Nickname;
		public string Password => Data.Password;
		public string ConfirmPassword => Data.ConfirmPassword;
	}
	public override void Clear()
	{
		UserGUID = string.Empty;
		Nickname = string.Empty;
		Password = string.Empty;
		ConfirmPassword = string.Empty;
		OnClear();
	}
	public override void Init()
	{
		UserGUID = string.Empty;
		Nickname = string.Empty;
		Password = string.Empty;
		ConfirmPassword = string.Empty;
		OnInitialize();
	}
	public override void CopyTo(Data toData)
	{
		if (!(toData is LoginFormData to)) return;
		to.Clear();
		to.UserGUID = UserGUID;
		to.Nickname = Nickname;
		to.Password = Password;
		to.ConfirmPassword = ConfirmPassword;
	}
	public override void FieldCopyTo(Data toData, int field)
	{
		if (!(toData is LoginFormData to)) return;
		switch(field)
		{
			case 0:to.UserGUID = UserGUID; return;
			case 1:to.Nickname = Nickname; return;
			case 2:to.Password = Password; return;
			case 3:to.ConfirmPassword = ConfirmPassword; return;
		}
	}
	public override void WriteToBuf(SerializationBuffer sb, bool append=false)
	{
		if (!append) sb.Clear();
		if (UserGUID != default)
		{
			sb.WriteSize(0);
			sb.Write(UserGUID);
		}
		if (Nickname != default)
		{
			sb.WriteSize(1);
			sb.Write(Nickname);
		}
		if (Password != default)
		{
			sb.WriteSize(2);
			sb.Write(Password);
		}
		if (ConfirmPassword != default)
		{
			sb.WriteSize(3);
			sb.Write(ConfirmPassword);
		}
		sb.WriteSize(-1);
	}
	/// <summary>
	/// ReadFromBuf loads the data from the buffer into the object. 
	/// maxField is used by Table.Filter to only load the fields that are needed.
	/// </summary>
	public override void ReadFromBuf(SerializationBuffer sb, int maxField)
	{
		Clear();
		int fieldIndex;
		fieldIndex = sb.ReadSize();
		if (fieldIndex > maxField) return; 
		if (fieldIndex == 0)
		{
			UserGUID = sb.ReadString();
			fieldIndex = sb.ReadSize();
			if (fieldIndex > maxField) return;
		}
		if (fieldIndex == 1)
		{
			Nickname = sb.ReadString();
			fieldIndex = sb.ReadSize();
			if (fieldIndex > maxField) return;
		}
		if (fieldIndex == 2)
		{
			Password = sb.ReadString();
			fieldIndex = sb.ReadSize();
			if (fieldIndex > maxField) return;
		}
		if (fieldIndex == 3)
		{
			ConfirmPassword = sb.ReadString();
			fieldIndex = sb.ReadSize();
			if (fieldIndex > maxField) return;
		}
		// no need to do OnLoad we are in a filter
	}
	/// <summary>
	/// ReadFromBuf loads the data from the buffer into the object. 
	/// </summary>
	public override void ReadFromBuf(SerializationBuffer sb)
	{
		Clear();
		int fieldIndex;
		fieldIndex = sb.ReadSize();
		if (fieldIndex == 0)
		{
			UserGUID = sb.ReadString();
			fieldIndex = sb.ReadSize();
		}
		if (fieldIndex == 1)
		{
			Nickname = sb.ReadString();
			fieldIndex = sb.ReadSize();
		}
		if (fieldIndex == 2)
		{
			Password = sb.ReadString();
			fieldIndex = sb.ReadSize();
		}
		if (fieldIndex == 3)
		{
			ConfirmPassword = sb.ReadString();
			fieldIndex = sb.ReadSize();
		}
		OnLoad();
	}
	public override bool FieldIsDefault(int field)
	{
		switch(field)
		{
			case 0:return UserGUID == string.Empty;
			case 1:return Nickname == string.Empty;
			case 2:return Password == string.Empty;
			case 3:return ConfirmPassword == string.Empty;
		}
		return false;
	}
	public override bool FieldIsEqual(Data toFld, int field)
	{
		if (!(toFld is LoginFormData to)) return false;
		switch(field)
		{
			case 0:return UserGUID == to.UserGUID;
			case 1:return Nickname == to.Nickname;
			case 2:return Password == to.Password;
			case 3:return ConfirmPassword == to.ConfirmPassword;
		}
		return false;
	}
	public override string FieldAsString(int field)
	{
		switch(field)
		{
			case 0:return UserGUID;
			case 1:return Nickname;
			case 2:return Password;
			case 3:return ConfirmPassword;
		}
		return string.Empty;
	}
	public override void FieldFromString(string str, int field)
	{
		switch(field)
		{
			case 0:UserGUID = str; return;
			case 1:Nickname = str; return;
			case 2:Password = str; return;
			case 3:ConfirmPassword = str; return;
		}
		return;
	}
	public override string FieldName(int field)
	{
		if (field < 0 || field >= FieldCount) return string.Empty;
		return FieldNames[field];
	}
	public override string FieldLabel(int field)
	{
		if (field < 0 || field >= FieldCount) return string.Empty;
		return FieldLabels[field];
	}
	public override void FieldLabelSet(int field, string label)
	{
		if (field < 0 || field >= FieldCount) return;
		FieldLabels[field] = label;
	}
	public override string FieldColumnLabel(int field)
	{
		if (field < 0 || field >= FieldCount) return string.Empty;
		return ColumnLabels[field];
	}
	public override void FieldColumnLabelSet(int field, string label)
	{
		if (field < 0 || field >= FieldCount) return;
		ColumnLabels[field] = label;
	}
	public override void FieldMinSet(int field, object min)
	{
		if (field < 0 || field >= FieldCount) return;
		Min[field] = min;
	}
	public override object FieldMin(int field)
	{
		if (field < 0 || field >= FieldCount) return 0;
		return Min[field];
	}
	public override void FieldMaxSet(int field, object max)
	{
		if (field < 0 || field >= FieldCount) return;
		Max[field] = max;
	}
	public override object FieldMax(int field)
	{
		if (field < 0 || field >= FieldCount) return 0;
		return Max[field];
	}
	public override int FieldIdFromName(string name)
	{
		if (FieldIdLookup.TryGetValue(name, out int id)) return id;
		return -1;
	}
	/// <summary>
	/// Writes to sb the field formated as a key.
	/// maxSize is used for strings only.
	/// </summary>
	public override void FieldAsKey(int field, SerializationBuffer sb, int maxSize)
	{
		switch(field)
		{
			case 0:UserGUID.AsKey(sb, maxSize); return;
			case 1:Nickname.AsKey(sb, maxSize); return;
			case 2:Password.AsKey(sb, maxSize); return;
			case 3:ConfirmPassword.AsKey(sb, maxSize); return;
		}
	}
	/// <summary>
	/// Returns the field as an object.
	/// </summary>
	public override Object FieldAsObject(int field)
	{
		switch(field)
		{
			case 0:return (Object)UserGUID;
			case 1:return (Object)Nickname;
			case 2:return (Object)Password;
			case 3:return (Object)ConfirmPassword;
		}
		return null;
	}
	/// <summary>
	/// Sets the field to an object.
	/// </summary>
	public override void FieldFromObject(Object o,  int field)
	{
		switch(field)
		{
			case 0:UserGUID = (string) o; return;
			case 1:Nickname = (string) o; return;
			case 2:Password = (string) o; return;
			case 3:ConfirmPassword = (string) o; return;
		}
	}
	/// <summary>
	/// Returns the field Type.
	/// </summary>
	public override Type FieldType(int field)
	{
		switch(field)
		{
			case 0:return UserGUID.GetType();
			case 1:return Nickname.GetType();
			case 2:return Password.GetType();
			case 3:return ConfirmPassword.GetType();
		}
		return null;
	}
	public partial class Context : DataContext<LoginFormData>
	{
		protected override void OnBaseConstruct()
		{
			Data = DataFactory<LoginFormData>.Rent();
		}
		public static Context Rent() => (Context) DataContextFactory<LoginFormData>.Rent();
		public override void Dispose()
		{
			DataContextFactory<LoginFormData>.Return(this);
		}
	}
	public static class FID
	{
		public const int UserGUID = 0;
		public const int Nickname = 1;
		public const int Password = 2;
		public const int ConfirmPassword = 3;
	}
	static object[] Min = { (int) 0,(int) 0,(int) 0,(int) 0, };
	static object[] Max = { (int) 0,(int) 0,(int) 0,(int) 0, };
	static string[] FieldLabels =
	{
		"User GUID",
		"Nickname",
		"Password",
		"Confirm Password",
	};
	static string[] ColumnLabels =
	{
		"User GUID",
		"Nickname",
		"Password",
		"Confirm Password",
	};
	static Dictionary<string, int> FieldIdLookup = new()
	{
		{ "UserGUID", 0 },
		{ "Nickname", 1 },
		{ "Password", 2 },
		{ "ConfirmPassword", 3 },
	};
	static string[] FieldNames =
	{
		"UserGUID",
		"Nickname",
		"Password",
		"ConfirmPassword",
	};
	static string[] TypeNames =
	{
		"string",
		"string",
		"string",
		"string",
	};
	public override string[] StaticTypeNames => TypeNames;
	static List<ValidationFunc>[] ValidationFuncs = new List<ValidationFunc>[4];
	public override List<ValidationFunc>[] StaticValidationFuncs => ValidationFuncs;
	static Func<Data,string>[] HtmlHelpers = new Func<Data,string>[4];
	public override Func<Data,string>[] StaticHtmlHelpers => HtmlHelpers;
	public partial class Util : DataUtil<LoginFormData>
	{
	}
}
