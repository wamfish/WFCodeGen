/// <auto-generated/>
using WFLib;
using Godot;
using System;
namespace WFCodeGen;
public partial class StyleBoxMargin : Data
{
	protected override void OnBaseConstruct()
	{
		Init();
	}
	public override int FieldCount => 16;
	public StyleBoxMargin Rent()=>DataFactory<StyleBoxMargin>.Rent();
	~StyleBoxMargin() => Dispose();
	public override void Dispose()
	{
		DataFactory<StyleBoxMargin>.Return(this);
		base.Dispose();
	}
	public override bool IsRecord => false;
	public partial class DataField : DataField<StyleBoxMargin>
	{
		public DataField(int field)
		{
			Field=field;
		}
		public float ContentLeft => Data.ContentLeft;
		public float ContentRight => Data.ContentRight;
		public float ContentTop => Data.ContentTop;
		public float ContentBottom => Data.ContentBottom;
		public int BorderWidthLeft => Data.BorderWidthLeft;
		public int BorderWidthRight => Data.BorderWidthRight;
		public int BorderWidthTop => Data.BorderWidthTop;
		public int BorderWidthBottom => Data.BorderWidthBottom;
		public float ExpandMarginLeft => Data.ExpandMarginLeft;
		public float ExpandMarginRight => Data.ExpandMarginRight;
		public float ExpandMarginTop => Data.ExpandMarginTop;
		public float ExpandMarginBottom => Data.ExpandMarginBottom;
		public int CornerRadiusTopLeft => Data.CornerRadiusTopLeft;
		public int CornerRadiusTopRight => Data.CornerRadiusTopRight;
		public int CornerRadiusBottomLeft => Data.CornerRadiusBottomLeft;
		public int CornerRadiusBottomRight => Data.CornerRadiusBottomRight;
	}
	public override void Clear()
	{
		ContentLeft = 0;
		ContentRight = 0;
		ContentTop = 0;
		ContentBottom = 0;
		BorderWidthLeft = 0;
		BorderWidthRight = 0;
		BorderWidthTop = 0;
		BorderWidthBottom = 0;
		ExpandMarginLeft = 0;
		ExpandMarginRight = 0;
		ExpandMarginTop = 0;
		ExpandMarginBottom = 0;
		CornerRadiusTopLeft = 0;
		CornerRadiusTopRight = 0;
		CornerRadiusBottomLeft = 0;
		CornerRadiusBottomRight = 0;
		OnClear();
	}
	public override void Init()
	{
		ContentLeft = 0;
		ContentRight = 0;
		ContentTop = 0;
		ContentBottom = 0;
		BorderWidthLeft = 0;
		BorderWidthRight = 0;
		BorderWidthTop = 0;
		BorderWidthBottom = 0;
		ExpandMarginLeft = 0;
		ExpandMarginRight = 0;
		ExpandMarginTop = 0;
		ExpandMarginBottom = 0;
		CornerRadiusTopLeft = 0;
		CornerRadiusTopRight = 0;
		CornerRadiusBottomLeft = 0;
		CornerRadiusBottomRight = 0;
		OnInitialize();
	}
	public override void CopyTo(Data toData)
	{
		if (!(toData is StyleBoxMargin to)) return;
		to.Clear();
		to.ContentLeft = ContentLeft;
		to.ContentRight = ContentRight;
		to.ContentTop = ContentTop;
		to.ContentBottom = ContentBottom;
		to.BorderWidthLeft = BorderWidthLeft;
		to.BorderWidthRight = BorderWidthRight;
		to.BorderWidthTop = BorderWidthTop;
		to.BorderWidthBottom = BorderWidthBottom;
		to.ExpandMarginLeft = ExpandMarginLeft;
		to.ExpandMarginRight = ExpandMarginRight;
		to.ExpandMarginTop = ExpandMarginTop;
		to.ExpandMarginBottom = ExpandMarginBottom;
		to.CornerRadiusTopLeft = CornerRadiusTopLeft;
		to.CornerRadiusTopRight = CornerRadiusTopRight;
		to.CornerRadiusBottomLeft = CornerRadiusBottomLeft;
		to.CornerRadiusBottomRight = CornerRadiusBottomRight;
	}
	public override void FieldCopyTo(Data toData, int field)
	{
		if (!(toData is StyleBoxMargin to)) return;
		switch(field)
		{
			case 0:to.ContentLeft = ContentLeft; return;
			case 1:to.ContentRight = ContentRight; return;
			case 2:to.ContentTop = ContentTop; return;
			case 3:to.ContentBottom = ContentBottom; return;
			case 4:to.BorderWidthLeft = BorderWidthLeft; return;
			case 5:to.BorderWidthRight = BorderWidthRight; return;
			case 6:to.BorderWidthTop = BorderWidthTop; return;
			case 7:to.BorderWidthBottom = BorderWidthBottom; return;
			case 8:to.ExpandMarginLeft = ExpandMarginLeft; return;
			case 9:to.ExpandMarginRight = ExpandMarginRight; return;
			case 10:to.ExpandMarginTop = ExpandMarginTop; return;
			case 11:to.ExpandMarginBottom = ExpandMarginBottom; return;
			case 12:to.CornerRadiusTopLeft = CornerRadiusTopLeft; return;
			case 13:to.CornerRadiusTopRight = CornerRadiusTopRight; return;
			case 14:to.CornerRadiusBottomLeft = CornerRadiusBottomLeft; return;
			case 15:to.CornerRadiusBottomRight = CornerRadiusBottomRight; return;
		}
	}
	public override void WriteToBuf(SerializationBuffer sb, bool append=false)
	{
		if (!append) sb.Clear();
		if (ContentLeft != default)
		{
			sb.WriteSize(0);
			sb.Write(ContentLeft);
		}
		if (ContentRight != default)
		{
			sb.WriteSize(1);
			sb.Write(ContentRight);
		}
		if (ContentTop != default)
		{
			sb.WriteSize(2);
			sb.Write(ContentTop);
		}
		if (ContentBottom != default)
		{
			sb.WriteSize(3);
			sb.Write(ContentBottom);
		}
		if (BorderWidthLeft != default)
		{
			sb.WriteSize(4);
			sb.Write(BorderWidthLeft);
		}
		if (BorderWidthRight != default)
		{
			sb.WriteSize(5);
			sb.Write(BorderWidthRight);
		}
		if (BorderWidthTop != default)
		{
			sb.WriteSize(6);
			sb.Write(BorderWidthTop);
		}
		if (BorderWidthBottom != default)
		{
			sb.WriteSize(7);
			sb.Write(BorderWidthBottom);
		}
		if (ExpandMarginLeft != default)
		{
			sb.WriteSize(8);
			sb.Write(ExpandMarginLeft);
		}
		if (ExpandMarginRight != default)
		{
			sb.WriteSize(9);
			sb.Write(ExpandMarginRight);
		}
		if (ExpandMarginTop != default)
		{
			sb.WriteSize(10);
			sb.Write(ExpandMarginTop);
		}
		if (ExpandMarginBottom != default)
		{
			sb.WriteSize(11);
			sb.Write(ExpandMarginBottom);
		}
		if (CornerRadiusTopLeft != default)
		{
			sb.WriteSize(12);
			sb.Write(CornerRadiusTopLeft);
		}
		if (CornerRadiusTopRight != default)
		{
			sb.WriteSize(13);
			sb.Write(CornerRadiusTopRight);
		}
		if (CornerRadiusBottomLeft != default)
		{
			sb.WriteSize(14);
			sb.Write(CornerRadiusBottomLeft);
		}
		if (CornerRadiusBottomRight != default)
		{
			sb.WriteSize(15);
			sb.Write(CornerRadiusBottomRight);
		}
		sb.WriteSize(-1);
	}
	/// <summary>
	/// ReadFromBuf loads the data from the buffer into the object. 
	/// maxField is used by Table.Filter to only load the fields that are needed.
	/// </summary>
	public override void ReadFromBuf(SerializationBuffer sb, int maxField)
	{
		Clear();
		int fieldIndex;
		fieldIndex = sb.ReadSize();
		if (fieldIndex > maxField) return; 
		if (fieldIndex == 0)
		{
			sb.Read(out ContentLeft);
			fieldIndex = sb.ReadSize();
			if (fieldIndex > maxField) return;
		}
		if (fieldIndex == 1)
		{
			sb.Read(out ContentRight);
			fieldIndex = sb.ReadSize();
			if (fieldIndex > maxField) return;
		}
		if (fieldIndex == 2)
		{
			sb.Read(out ContentTop);
			fieldIndex = sb.ReadSize();
			if (fieldIndex > maxField) return;
		}
		if (fieldIndex == 3)
		{
			sb.Read(out ContentBottom);
			fieldIndex = sb.ReadSize();
			if (fieldIndex > maxField) return;
		}
		if (fieldIndex == 4)
		{
			sb.Read(out BorderWidthLeft);
			fieldIndex = sb.ReadSize();
			if (fieldIndex > maxField) return;
		}
		if (fieldIndex == 5)
		{
			sb.Read(out BorderWidthRight);
			fieldIndex = sb.ReadSize();
			if (fieldIndex > maxField) return;
		}
		if (fieldIndex == 6)
		{
			sb.Read(out BorderWidthTop);
			fieldIndex = sb.ReadSize();
			if (fieldIndex > maxField) return;
		}
		if (fieldIndex == 7)
		{
			sb.Read(out BorderWidthBottom);
			fieldIndex = sb.ReadSize();
			if (fieldIndex > maxField) return;
		}
		if (fieldIndex == 8)
		{
			sb.Read(out ExpandMarginLeft);
			fieldIndex = sb.ReadSize();
			if (fieldIndex > maxField) return;
		}
		if (fieldIndex == 9)
		{
			sb.Read(out ExpandMarginRight);
			fieldIndex = sb.ReadSize();
			if (fieldIndex > maxField) return;
		}
		if (fieldIndex == 10)
		{
			sb.Read(out ExpandMarginTop);
			fieldIndex = sb.ReadSize();
			if (fieldIndex > maxField) return;
		}
		if (fieldIndex == 11)
		{
			sb.Read(out ExpandMarginBottom);
			fieldIndex = sb.ReadSize();
			if (fieldIndex > maxField) return;
		}
		if (fieldIndex == 12)
		{
			sb.Read(out CornerRadiusTopLeft);
			fieldIndex = sb.ReadSize();
			if (fieldIndex > maxField) return;
		}
		if (fieldIndex == 13)
		{
			sb.Read(out CornerRadiusTopRight);
			fieldIndex = sb.ReadSize();
			if (fieldIndex > maxField) return;
		}
		if (fieldIndex == 14)
		{
			sb.Read(out CornerRadiusBottomLeft);
			fieldIndex = sb.ReadSize();
			if (fieldIndex > maxField) return;
		}
		if (fieldIndex == 15)
		{
			sb.Read(out CornerRadiusBottomRight);
			fieldIndex = sb.ReadSize();
			if (fieldIndex > maxField) return;
		}
		// no need to do OnLoad we are in a filter
	}
	/// <summary>
	/// ReadFromBuf loads the data from the buffer into the object. 
	/// </summary>
	public override void ReadFromBuf(SerializationBuffer sb)
	{
		Clear();
		int fieldIndex;
		fieldIndex = sb.ReadSize();
		if (fieldIndex == 0)
		{
			sb.Read(out ContentLeft);
			fieldIndex = sb.ReadSize();
		}
		if (fieldIndex == 1)
		{
			sb.Read(out ContentRight);
			fieldIndex = sb.ReadSize();
		}
		if (fieldIndex == 2)
		{
			sb.Read(out ContentTop);
			fieldIndex = sb.ReadSize();
		}
		if (fieldIndex == 3)
		{
			sb.Read(out ContentBottom);
			fieldIndex = sb.ReadSize();
		}
		if (fieldIndex == 4)
		{
			sb.Read(out BorderWidthLeft);
			fieldIndex = sb.ReadSize();
		}
		if (fieldIndex == 5)
		{
			sb.Read(out BorderWidthRight);
			fieldIndex = sb.ReadSize();
		}
		if (fieldIndex == 6)
		{
			sb.Read(out BorderWidthTop);
			fieldIndex = sb.ReadSize();
		}
		if (fieldIndex == 7)
		{
			sb.Read(out BorderWidthBottom);
			fieldIndex = sb.ReadSize();
		}
		if (fieldIndex == 8)
		{
			sb.Read(out ExpandMarginLeft);
			fieldIndex = sb.ReadSize();
		}
		if (fieldIndex == 9)
		{
			sb.Read(out ExpandMarginRight);
			fieldIndex = sb.ReadSize();
		}
		if (fieldIndex == 10)
		{
			sb.Read(out ExpandMarginTop);
			fieldIndex = sb.ReadSize();
		}
		if (fieldIndex == 11)
		{
			sb.Read(out ExpandMarginBottom);
			fieldIndex = sb.ReadSize();
		}
		if (fieldIndex == 12)
		{
			sb.Read(out CornerRadiusTopLeft);
			fieldIndex = sb.ReadSize();
		}
		if (fieldIndex == 13)
		{
			sb.Read(out CornerRadiusTopRight);
			fieldIndex = sb.ReadSize();
		}
		if (fieldIndex == 14)
		{
			sb.Read(out CornerRadiusBottomLeft);
			fieldIndex = sb.ReadSize();
		}
		if (fieldIndex == 15)
		{
			sb.Read(out CornerRadiusBottomRight);
			fieldIndex = sb.ReadSize();
		}
		OnLoad();
	}
	public override bool FieldIsDefault(int field)
	{
		switch(field)
		{
			case 0:return ContentLeft == default;
			case 1:return ContentRight == default;
			case 2:return ContentTop == default;
			case 3:return ContentBottom == default;
			case 4:return BorderWidthLeft == default;
			case 5:return BorderWidthRight == default;
			case 6:return BorderWidthTop == default;
			case 7:return BorderWidthBottom == default;
			case 8:return ExpandMarginLeft == default;
			case 9:return ExpandMarginRight == default;
			case 10:return ExpandMarginTop == default;
			case 11:return ExpandMarginBottom == default;
			case 12:return CornerRadiusTopLeft == default;
			case 13:return CornerRadiusTopRight == default;
			case 14:return CornerRadiusBottomLeft == default;
			case 15:return CornerRadiusBottomRight == default;
		}
		return false;
	}
	public override bool FieldIsEqual(Data toFld, int field)
	{
		if (!(toFld is StyleBoxMargin to)) return false;
		switch(field)
		{
			case 0:return ContentLeft == to.ContentLeft;
			case 1:return ContentRight == to.ContentRight;
			case 2:return ContentTop == to.ContentTop;
			case 3:return ContentBottom == to.ContentBottom;
			case 4:return BorderWidthLeft == to.BorderWidthLeft;
			case 5:return BorderWidthRight == to.BorderWidthRight;
			case 6:return BorderWidthTop == to.BorderWidthTop;
			case 7:return BorderWidthBottom == to.BorderWidthBottom;
			case 8:return ExpandMarginLeft == to.ExpandMarginLeft;
			case 9:return ExpandMarginRight == to.ExpandMarginRight;
			case 10:return ExpandMarginTop == to.ExpandMarginTop;
			case 11:return ExpandMarginBottom == to.ExpandMarginBottom;
			case 12:return CornerRadiusTopLeft == to.CornerRadiusTopLeft;
			case 13:return CornerRadiusTopRight == to.CornerRadiusTopRight;
			case 14:return CornerRadiusBottomLeft == to.CornerRadiusBottomLeft;
			case 15:return CornerRadiusBottomRight == to.CornerRadiusBottomRight;
		}
		return false;
	}
	public override string FieldAsString(int field)
	{
		switch(field)
		{
			case 0:return ContentLeft.AsString();
			case 1:return ContentRight.AsString();
			case 2:return ContentTop.AsString();
			case 3:return ContentBottom.AsString();
			case 4:return BorderWidthLeft.AsString();
			case 5:return BorderWidthRight.AsString();
			case 6:return BorderWidthTop.AsString();
			case 7:return BorderWidthBottom.AsString();
			case 8:return ExpandMarginLeft.AsString();
			case 9:return ExpandMarginRight.AsString();
			case 10:return ExpandMarginTop.AsString();
			case 11:return ExpandMarginBottom.AsString();
			case 12:return CornerRadiusTopLeft.AsString();
			case 13:return CornerRadiusTopRight.AsString();
			case 14:return CornerRadiusBottomLeft.AsString();
			case 15:return CornerRadiusBottomRight.AsString();
		}
		return string.Empty;
	}
	public override void FieldFromString(string str, int field)
	{
		switch(field)
		{
			case 0:ContentLeft = str.AsFloat(); return;
			case 1:ContentRight = str.AsFloat(); return;
			case 2:ContentTop = str.AsFloat(); return;
			case 3:ContentBottom = str.AsFloat(); return;
			case 4:BorderWidthLeft = str.AsInt(); return;
			case 5:BorderWidthRight = str.AsInt(); return;
			case 6:BorderWidthTop = str.AsInt(); return;
			case 7:BorderWidthBottom = str.AsInt(); return;
			case 8:ExpandMarginLeft = str.AsFloat(); return;
			case 9:ExpandMarginRight = str.AsFloat(); return;
			case 10:ExpandMarginTop = str.AsFloat(); return;
			case 11:ExpandMarginBottom = str.AsFloat(); return;
			case 12:CornerRadiusTopLeft = str.AsInt(); return;
			case 13:CornerRadiusTopRight = str.AsInt(); return;
			case 14:CornerRadiusBottomLeft = str.AsInt(); return;
			case 15:CornerRadiusBottomRight = str.AsInt(); return;
		}
		return;
	}
	public override string FieldName(int field)
	{
		if (field < 0 || field >= FieldCount) return string.Empty;
		return FieldNames[field];
	}
	public override string FieldLabel(int field)
	{
		if (field < 0 || field >= FieldCount) return string.Empty;
		return FieldLabels[field];
	}
	public override void FieldLabelSet(int field, string label)
	{
		if (field < 0 || field >= FieldCount) return;
		FieldLabels[field] = label;
	}
	public override string FieldColumnLabel(int field)
	{
		if (field < 0 || field >= FieldCount) return string.Empty;
		return ColumnLabels[field];
	}
	public override void FieldColumnLabelSet(int field, string label)
	{
		if (field < 0 || field >= FieldCount) return;
		ColumnLabels[field] = label;
	}
	public override void FieldMinSet(int field, object min)
	{
		if (field < 0 || field >= FieldCount) return;
		Min[field] = min;
	}
	public override object FieldMin(int field)
	{
		if (field < 0 || field >= FieldCount) return 0;
		return Min[field];
	}
	public override void FieldMaxSet(int field, object max)
	{
		if (field < 0 || field >= FieldCount) return;
		Max[field] = max;
	}
	public override object FieldMax(int field)
	{
		if (field < 0 || field >= FieldCount) return 0;
		return Max[field];
	}
	public override int FieldIdFromName(string name)
	{
		if (FieldIdLookup.TryGetValue(name, out int id)) return id;
		return -1;
	}
	/// <summary>
	/// Writes to sb the field formated as a key.
	/// maxSize is used for strings only.
	/// </summary>
	public override void FieldAsKey(int field, SerializationBuffer sb, int maxSize)
	{
		switch(field)
		{
			case 0:sb.Write(ContentLeft); return;
			case 1:sb.Write(ContentRight); return;
			case 2:sb.Write(ContentTop); return;
			case 3:sb.Write(ContentBottom); return;
			case 4:sb.Write(BorderWidthLeft); return;
			case 5:sb.Write(BorderWidthRight); return;
			case 6:sb.Write(BorderWidthTop); return;
			case 7:sb.Write(BorderWidthBottom); return;
			case 8:sb.Write(ExpandMarginLeft); return;
			case 9:sb.Write(ExpandMarginRight); return;
			case 10:sb.Write(ExpandMarginTop); return;
			case 11:sb.Write(ExpandMarginBottom); return;
			case 12:sb.Write(CornerRadiusTopLeft); return;
			case 13:sb.Write(CornerRadiusTopRight); return;
			case 14:sb.Write(CornerRadiusBottomLeft); return;
			case 15:sb.Write(CornerRadiusBottomRight); return;
		}
	}
	/// <summary>
	/// Returns the field as an object.
	/// </summary>
	public override Object FieldAsObject(int field)
	{
		switch(field)
		{
			case 0:return (Object)ContentLeft;
			case 1:return (Object)ContentRight;
			case 2:return (Object)ContentTop;
			case 3:return (Object)ContentBottom;
			case 4:return (Object)BorderWidthLeft;
			case 5:return (Object)BorderWidthRight;
			case 6:return (Object)BorderWidthTop;
			case 7:return (Object)BorderWidthBottom;
			case 8:return (Object)ExpandMarginLeft;
			case 9:return (Object)ExpandMarginRight;
			case 10:return (Object)ExpandMarginTop;
			case 11:return (Object)ExpandMarginBottom;
			case 12:return (Object)CornerRadiusTopLeft;
			case 13:return (Object)CornerRadiusTopRight;
			case 14:return (Object)CornerRadiusBottomLeft;
			case 15:return (Object)CornerRadiusBottomRight;
		}
		return null;
	}
	/// <summary>
	/// Sets the field to an object.
	/// </summary>
	public override void FieldFromObject(Object o,  int field)
	{
		switch(field)
		{
			case 0:ContentLeft = (float) o; return;
			case 1:ContentRight = (float) o; return;
			case 2:ContentTop = (float) o; return;
			case 3:ContentBottom = (float) o; return;
			case 4:BorderWidthLeft = (int) o; return;
			case 5:BorderWidthRight = (int) o; return;
			case 6:BorderWidthTop = (int) o; return;
			case 7:BorderWidthBottom = (int) o; return;
			case 8:ExpandMarginLeft = (float) o; return;
			case 9:ExpandMarginRight = (float) o; return;
			case 10:ExpandMarginTop = (float) o; return;
			case 11:ExpandMarginBottom = (float) o; return;
			case 12:CornerRadiusTopLeft = (int) o; return;
			case 13:CornerRadiusTopRight = (int) o; return;
			case 14:CornerRadiusBottomLeft = (int) o; return;
			case 15:CornerRadiusBottomRight = (int) o; return;
		}
	}
	/// <summary>
	/// Returns the field Type.
	/// </summary>
	public override Type FieldType(int field)
	{
		switch(field)
		{
			case 0:return ContentLeft.GetType();
			case 1:return ContentRight.GetType();
			case 2:return ContentTop.GetType();
			case 3:return ContentBottom.GetType();
			case 4:return BorderWidthLeft.GetType();
			case 5:return BorderWidthRight.GetType();
			case 6:return BorderWidthTop.GetType();
			case 7:return BorderWidthBottom.GetType();
			case 8:return ExpandMarginLeft.GetType();
			case 9:return ExpandMarginRight.GetType();
			case 10:return ExpandMarginTop.GetType();
			case 11:return ExpandMarginBottom.GetType();
			case 12:return CornerRadiusTopLeft.GetType();
			case 13:return CornerRadiusTopRight.GetType();
			case 14:return CornerRadiusBottomLeft.GetType();
			case 15:return CornerRadiusBottomRight.GetType();
		}
		return null;
	}
	public partial class Context : DataContext<StyleBoxMargin>
	{
		protected override void OnBaseConstruct()
		{
			Data = DataFactory<StyleBoxMargin>.Rent();
		}
		public static Context Rent() => (Context) DataContextFactory<StyleBoxMargin>.Rent();
		public override void Dispose()
		{
			DataContextFactory<StyleBoxMargin>.Return(this);
		}
	}
	public static class FID
	{
		public const int ContentLeft = 0;
		public const int ContentRight = 1;
		public const int ContentTop = 2;
		public const int ContentBottom = 3;
		public const int BorderWidthLeft = 4;
		public const int BorderWidthRight = 5;
		public const int BorderWidthTop = 6;
		public const int BorderWidthBottom = 7;
		public const int ExpandMarginLeft = 8;
		public const int ExpandMarginRight = 9;
		public const int ExpandMarginTop = 10;
		public const int ExpandMarginBottom = 11;
		public const int CornerRadiusTopLeft = 12;
		public const int CornerRadiusTopRight = 13;
		public const int CornerRadiusBottomLeft = 14;
		public const int CornerRadiusBottomRight = 15;
	}
	static object[] Min = { (float) -16777217,(float) -16777217,(float) -16777217,(float) -16777217,(int) -2147483648,(int) -2147483648,(int) -2147483648,(int) -2147483648,(float) -16777217,(float) -16777217,(float) -16777217,(float) -16777217,(int) -2147483648,(int) -2147483648,(int) -2147483648,(int) -2147483648, };
	static object[] Max = { (float) 16777217,(float) 16777217,(float) 16777217,(float) 16777217,(int) 2147483647,(int) 2147483647,(int) 2147483647,(int) 2147483647,(float) 16777217,(float) 16777217,(float) 16777217,(float) 16777217,(int) 2147483647,(int) 2147483647,(int) 2147483647,(int) 2147483647, };
	static string[] FieldLabels =
	{
		"Content Left",
		"Content Right",
		"Content Top",
		"Content Bottom",
		"Border Width Left",
		"Border Width Right",
		"Border Width Top",
		"Border Width Bottom",
		"Expand Margin Left",
		"Expand Margin Right",
		"Expand Margin Top",
		"Expand Margin Bottom",
		"Corner Radius Top Left",
		"Corner Radius Top Right",
		"Corner Radius Bottom Left",
		"Corner Radius Bottom Right",
	};
	static string[] ColumnLabels =
	{
		"Content Left",
		"Content Right",
		"Content Top",
		"Content Bottom",
		"Border Width Left",
		"Border Width Right",
		"Border Width Top",
		"Border Width Bottom",
		"Expand Margin Left",
		"Expand Margin Right",
		"Expand Margin Top",
		"Expand Margin Bottom",
		"Corner Radius Top Left",
		"Corner Radius Top Right",
		"Corner Radius Bottom Left",
		"Corner Radius Bottom Right",
	};
	static Dictionary<string, int> FieldIdLookup = new()
	{
		{ "ContentLeft", 0 },
		{ "ContentRight", 1 },
		{ "ContentTop", 2 },
		{ "ContentBottom", 3 },
		{ "BorderWidthLeft", 4 },
		{ "BorderWidthRight", 5 },
		{ "BorderWidthTop", 6 },
		{ "BorderWidthBottom", 7 },
		{ "ExpandMarginLeft", 8 },
		{ "ExpandMarginRight", 9 },
		{ "ExpandMarginTop", 10 },
		{ "ExpandMarginBottom", 11 },
		{ "CornerRadiusTopLeft", 12 },
		{ "CornerRadiusTopRight", 13 },
		{ "CornerRadiusBottomLeft", 14 },
		{ "CornerRadiusBottomRight", 15 },
	};
	static string[] FieldNames =
	{
		"ContentLeft",
		"ContentRight",
		"ContentTop",
		"ContentBottom",
		"BorderWidthLeft",
		"BorderWidthRight",
		"BorderWidthTop",
		"BorderWidthBottom",
		"ExpandMarginLeft",
		"ExpandMarginRight",
		"ExpandMarginTop",
		"ExpandMarginBottom",
		"CornerRadiusTopLeft",
		"CornerRadiusTopRight",
		"CornerRadiusBottomLeft",
		"CornerRadiusBottomRight",
	};
	static string[] TypeNames =
	{
		"float",
		"float",
		"float",
		"float",
		"int",
		"int",
		"int",
		"int",
		"float",
		"float",
		"float",
		"float",
		"int",
		"int",
		"int",
		"int",
	};
	public override string[] StaticTypeNames => TypeNames;
	static List<ValidationFunc>[] ValidationFuncs = new List<ValidationFunc>[16];
	public override List<ValidationFunc>[] StaticValidationFuncs => ValidationFuncs;
	public partial class Util : DataUtil<StyleBoxMargin>
	{
	}
}
