/// <auto-generated/>
using WFLib;
using Godot;
using System;
namespace WFCodeGen;
public partial class AppConfig : Record
{
	protected override void OnBaseConstruct()
	{
		Init();
	}
	public override int FieldCount => 7;
	public AppConfig Rent()=>RecordFactory<AppConfig>.Rent();
	public override void InitContextFactory()
	{
		Context.InitContextFactory();
	}
	~AppConfig() => Dispose();
	public override void Dispose()
	{
		RecordFactory<AppConfig>.Return(this);
		base.Dispose();
	}
	public override bool IsRecord => true;
	public override void Clear()
	{
		StatusCode = 0;
		ID = 0;
		Timestamp = DateTime.MinValue;
		EditByID = 0;
		ConfigName = string.Empty;
		Port = string.Empty;
		GitignoreSourceDir = string.Empty;
		OnClear();
	}
	public override void Init()
	{
		StatusCode = 0;
		ID = 0;
		Timestamp = DateTime.MinValue;
		EditByID = 0;
		ConfigName = string.Empty;
		Port = string.Empty;
		GitignoreSourceDir = string.Empty;
		OnInitialize();
	}
	public override void CopyTo(Data toData)
	{
		if (!(toData is AppConfig to)) return;
		to.Clear();
		to.StatusCode = StatusCode;
		to.ID = ID;
		to.Timestamp = Timestamp;
		to.EditByID = EditByID;
		to.ConfigName = ConfigName;
		to.Port = Port;
		to.GitignoreSourceDir = GitignoreSourceDir;
	}
	public override void FieldCopyTo(Data toData, int field)
	{
		if (!(toData is AppConfig to)) return;
		switch(field)
		{
			case 0:to.StatusCode = StatusCode; return;
			case 1:to.ID = ID; return;
			case 2:to.Timestamp = Timestamp; return;
			case 3:to.EditByID = EditByID; return;
			case 4:to.ConfigName = ConfigName; return;
			case 5:to.Port = Port; return;
			case 6:to.GitignoreSourceDir = GitignoreSourceDir; return;
		}
	}
	public override void WriteToBuf(SerializationBuffer sb, bool append=false)
	{
		if (!append) sb.Clear();
		sb.Write(StatusCode);
		sb.Write(ID);
		sb.Write(Timestamp);
		sb.Write(EditByID);
		if (ConfigName != default)
		{
			sb.WriteSize(4);
			sb.Write(ConfigName);
		}
		if (Port != default)
		{
			sb.WriteSize(5);
			sb.Write(Port);
		}
		if (GitignoreSourceDir != default)
		{
			sb.WriteSize(6);
			sb.Write(GitignoreSourceDir);
		}
		sb.WriteSize(-1);
	}
	/// <summary>
	/// ReadFromBuf loads the data from the buffer into the object. 
	/// maxField is used by Table.Filter to only load the fields that are needed.
	/// </summary>
	public override void ReadFromBuf(SerializationBuffer sb, int maxField)
	{
		Clear();
		int fieldIndex;
		StatusCode = sb.ReadByte();
		ID = sb.ReadInt();
		if (maxField < 2) return; // no need to do OnLoad we are in a filter
		Timestamp = sb.ReadDateTime();
		if (maxField < 3) return; // no need to do OnLoad we are in a filter
		EditByID = sb.ReadInt();
		fieldIndex = sb.ReadSize();
		if (fieldIndex > maxField) return; 
		if (fieldIndex == 4)
		{
			ConfigName = sb.ReadString();
			fieldIndex = sb.ReadSize();
			if (fieldIndex > maxField) return;
		}
		if (fieldIndex == 5)
		{
			Port = sb.ReadString();
			fieldIndex = sb.ReadSize();
			if (fieldIndex > maxField) return;
		}
		if (fieldIndex == 6)
		{
			GitignoreSourceDir = sb.ReadString();
			fieldIndex = sb.ReadSize();
			if (fieldIndex > maxField) return;
		}
		// no need to do OnLoad we are in a filter
	}
	/// <summary>
	/// ReadFromBuf loads the data from the buffer into the object. 
	/// </summary>
	public override void ReadFromBuf(SerializationBuffer sb)
	{
		Clear();
		int fieldIndex;
		StatusCode = sb.ReadByte();
		ID = sb.ReadInt();
		Timestamp = sb.ReadDateTime();
		EditByID = sb.ReadInt();
		fieldIndex = sb.ReadSize();
		if (fieldIndex == 4)
		{
			ConfigName = sb.ReadString();
			fieldIndex = sb.ReadSize();
		}
		if (fieldIndex == 5)
		{
			Port = sb.ReadString();
			fieldIndex = sb.ReadSize();
		}
		if (fieldIndex == 6)
		{
			GitignoreSourceDir = sb.ReadString();
			fieldIndex = sb.ReadSize();
		}
		OnLoad();
	}
	public override bool FieldIsDefault(int field)
	{
		switch(field)
		{
			case 0:return StatusCode == default;
			case 1:return ID == default;
			case 2:return Timestamp == default;
			case 3:return EditByID == default;
			case 4:return ConfigName == string.Empty;
			case 5:return Port == string.Empty;
			case 6:return GitignoreSourceDir == string.Empty;
		}
		return false;
	}
	public override bool FieldIsEqual(Data toFld, int field)
	{
		if (!(toFld is AppConfig to)) return false;
		switch(field)
		{
			case 0:return StatusCode == to.StatusCode;
			case 1:return ID == to.ID;
			case 2:return Timestamp == to.Timestamp;
			case 3:return EditByID == to.EditByID;
			case 4:return ConfigName == to.ConfigName;
			case 5:return Port == to.Port;
			case 6:return GitignoreSourceDir == to.GitignoreSourceDir;
		}
		return false;
	}
	public override string FieldAsString(int field)
	{
		switch(field)
		{
			case 0:return StatusCode.AsString();
			case 1:return ID.AsString();
			case 2:return Timestamp.AsString();
			case 3:return EditByID.AsString();
			case 4:return ConfigName;
			case 5:return Port;
			case 6:return GitignoreSourceDir;
		}
		return string.Empty;
	}
	public override void FieldFromString(string str, int field)
	{
		switch(field)
		{
			case 0:StatusCode = str.AsByte(); return;
			case 1:ID = str.AsInt(); return;
			case 2:Timestamp = str.AsDateTime(); return;
			case 3:EditByID = str.AsInt(); return;
			case 4:ConfigName = str; return;
			case 5:Port = str; return;
			case 6:GitignoreSourceDir = str; return;
		}
		return;
	}
	public override string FieldName(int field)
	{
		if (field < 0 || field >= FieldCount) return string.Empty;
		return FieldNames[field];
	}
	public override string FieldLabel(int field)
	{
		if (field < 0 || field >= FieldCount) return string.Empty;
		return FieldLabels[field];
	}
	public override void FieldLabelSet(int field, string label)
	{
		if (field < 0 || field >= FieldCount) return;
		FieldLabels[field] = label;
	}
	public override string FieldColumnLabel(int field)
	{
		if (field < 0 || field >= FieldCount) return string.Empty;
		return ColumnLabels[field];
	}
	public override void FieldColumnLabelSet(int field, string label)
	{
		if (field < 0 || field >= FieldCount) return;
		ColumnLabels[field] = label;
	}
	public override void FieldMinSet(int field, object min)
	{
		if (field < 0 || field >= FieldCount) return;
		Min[field] = min;
	}
	public override object FieldMin(int field)
	{
		if (field < 0 || field >= FieldCount) return 0;
		return Min[field];
	}
	public override void FieldMaxSet(int field, object max)
	{
		if (field < 0 || field >= FieldCount) return;
		Max[field] = max;
	}
	public override object FieldMax(int field)
	{
		if (field < 0 || field >= FieldCount) return 0;
		return Max[field];
	}
	public override int FieldIdFromName(string name)
	{
		if (FieldIdLookup.TryGetValue(name, out int id)) return id;
		return -1;
	}
	/// <summary>
	/// Writes to sb the field formated as a key.
	/// maxSize is used for strings only.
	/// </summary>
	public override void FieldAsKey(int field, SerializationBuffer sb, int maxSize)
	{
		switch(field)
		{
			case 0:sb.Write(StatusCode); return;
			case 1:sb.Write(ID); return;
			case 2:sb.Write(Timestamp); return;
			case 3:sb.Write(EditByID); return;
			case 4:ConfigName.AsKey(sb, maxSize); return;
			case 5:Port.AsKey(sb, maxSize); return;
			case 6:GitignoreSourceDir.AsKey(sb, maxSize); return;
		}
	}
	/// <summary>
	/// Returns the field as an object.
	/// </summary>
	public override Object FieldAsObject(int field)
	{
		switch(field)
		{
			case 0:return (Object)StatusCode;
			case 1:return (Object)ID;
			case 2:return (Object)Timestamp;
			case 3:return (Object)EditByID;
			case 4:return (Object)ConfigName;
			case 5:return (Object)Port;
			case 6:return (Object)GitignoreSourceDir;
		}
		return null;
	}
	/// <summary>
	/// Sets the field to an object.
	/// </summary>
	public override void FieldFromObject(Object o,  int field)
	{
		switch(field)
		{
			case 0:StatusCode = (byte) o; return;
			case 1:ID = (int) o; return;
			case 2:Timestamp = (DateTime) o; return;
			case 3:EditByID = (int) o; return;
			case 4:ConfigName = (string) o; return;
			case 5:Port = (string) o; return;
			case 6:GitignoreSourceDir = (string) o; return;
		}
	}
	/// <summary>
	/// Returns the field Type.
	/// </summary>
	public override Type FieldType(int field)
	{
		switch(field)
		{
			case 0:return StatusCode.GetType();
			case 1:return ID.GetType();
			case 2:return Timestamp.GetType();
			case 3:return EditByID.GetType();
			case 4:return ConfigName.GetType();
			case 5:return Port.GetType();
			case 6:return GitignoreSourceDir.GetType();
		}
		return null;
	}
	public partial class Context : RecordContext<AppConfig>
	{
		protected override void OnBaseConstruct()
		{
			table = TableFactory<Table,AppConfig>.Rent();
		}
		internal static void InitContextFactory() => RecordContextFactory<AppConfig>.SetCreateMethod(()=>new Context(),_setEditById);
		static Context()
		{
			InitContextFactory();
		}
		public static Context Rent(int EditByID=-2) => (Context) RecordContextFactory<AppConfig>.Rent(EditByID);
		public override Table Table => (Table) table;
		public override void Dispose()
		{
			RecordContextFactory<AppConfig>.Return(this);
		}
		public Status ReadByConfigNameKey(AppConfig data)
		{
			return Table.ConfigNameKey.Read(data,EditByID);
		}
	}
	public static class FID
	{
		public const int StatusCode = 0;
		public const int ID = 1;
		public const int Timestamp = 2;
		public const int EditByID = 3;
		public const int ConfigName = 4;
		public const int Port = 5;
		public const int GitignoreSourceDir = 6;
	}
	static object[] Min = { (byte) 0,(int) -2147483648,(long) 0,(int) -2147483648,(int) 0,(int) 0,(int) 0, };
	static object[] Max = { (byte) 255,(int) 2147483647,(long) 3155378975999999999,(int) 2147483647,(int) 0,(int) 0,(int) 0, };
	static string[] FieldLabels =
	{
		"Status Code",
		"ID",
		"Timestamp",
		"Edit By ID",
		"Config Name",
		"Port",
		"Gitignore Source Dir",
	};
	static string[] ColumnLabels =
	{
		"Status Code",
		"ID",
		"Timestamp",
		"Edit By ID",
		"Config Name",
		"Port",
		"Gitignore Source Dir",
	};
	static Dictionary<string, int> FieldIdLookup = new()
	{
		{ "StatusCode", 0 },
		{ "ID", 1 },
		{ "Timestamp", 2 },
		{ "EditByID", 3 },
		{ "ConfigName", 4 },
		{ "Port", 5 },
		{ "GitignoreSourceDir", 6 },
	};
	static string[] FieldNames =
	{
		"StatusCode",
		"ID",
		"Timestamp",
		"EditByID",
		"ConfigName",
		"Port",
		"GitignoreSourceDir",
	};
	static string[] TypeNames =
	{
		"byte",
		"int",
		"DateTime",
		"int",
		"string",
		"string",
		"string",
	};
	public override string[] StaticTypeNames => TypeNames;
	static List<ValidationFunc>[] ValidationFuncs = new List<ValidationFunc>[7];
	public override List<ValidationFunc>[] StaticValidationFuncs => ValidationFuncs;
	static Func<Data,string>[] HtmlHelpers = new Func<Data,string>[7];
	public override Func<Data,string>[] StaticHtmlHelpers => HtmlHelpers;
	public partial class Util : RecordUtil<AppConfig>
	{
		public static Status ReadByConfigNameKey(AppConfig data,int EditByID=-2)
		{
			var context = (Context) RentContext(EditByID);
			var status = context.ReadByConfigNameKey(data);
			return status;
		}
	}
	public partial class Table : Table<AppConfig>
	{
		public readonly Key ConfigNameKey;
		public Table()
		{
			ConfigNameKey = new Key(this,FID.ConfigName);
		}
	}
}
