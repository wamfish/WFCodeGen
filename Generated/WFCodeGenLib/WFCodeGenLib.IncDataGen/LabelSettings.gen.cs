/// <auto-generated/>
using WFLib;
using Godot;
using System;
namespace WFCodeGen;
public partial class LabelSettings : Data
{
	protected override void OnBaseConstruct()
	{
		Init();
	}
	public override int FieldCount => 6;
	public LabelSettings Rent()=>DataFactory<LabelSettings>.Rent();
	~LabelSettings() => Dispose();
	public override void Dispose()
	{
		DataFactory<LabelSettings>.Return(this);
		base.Dispose();
	}
	public override bool IsRecord => false;
	public partial class DataField : DataField<LabelSettings>
	{
		public DataField(int field)
		{
			Field=field;
		}
		public FontSettings.DataField HeaderFont => Data.HeaderFont;
		public FontSettings.DataField LabelFont => Data.LabelFont;
		public StyleBoxSettings.DataField HeaderStyleBox => Data.HeaderStyleBox;
		public StyleBoxSettings.DataField LabelStyleBox => Data.LabelStyleBox;
		public StyleBoxSettings.DataField HeaderStyleBoxNM => Data.HeaderStyleBoxNM;
		public StyleBoxSettings.DataField LabelStyleBoxNM => Data.LabelStyleBoxNM;
	}
	public override void Clear()
	{
		if (HeaderFont == null)
		{
			HeaderFont = new(0);
		}
		HeaderFont.Clear();
		if (LabelFont == null)
		{
			LabelFont = new(1);
		}
		LabelFont.Clear();
		if (HeaderStyleBox == null)
		{
			HeaderStyleBox = new(2);
		}
		HeaderStyleBox.Clear();
		if (LabelStyleBox == null)
		{
			LabelStyleBox = new(3);
		}
		LabelStyleBox.Clear();
		if (HeaderStyleBoxNM == null)
		{
			HeaderStyleBoxNM = new(4);
		}
		HeaderStyleBoxNM.Clear();
		if (LabelStyleBoxNM == null)
		{
			LabelStyleBoxNM = new(5);
		}
		LabelStyleBoxNM.Clear();
		OnClear();
	}
	public override void Init()
	{
		if (HeaderFont == null) 
		{
			HeaderFont = new(0);
		}
		HeaderFont.Init();
		if (LabelFont == null) 
		{
			LabelFont = new(1);
		}
		LabelFont.Init();
		if (HeaderStyleBox == null) 
		{
			HeaderStyleBox = new(2);
		}
		HeaderStyleBox.Init();
		if (LabelStyleBox == null) 
		{
			LabelStyleBox = new(3);
		}
		LabelStyleBox.Init();
		if (HeaderStyleBoxNM == null) 
		{
			HeaderStyleBoxNM = new(4);
		}
		HeaderStyleBoxNM.Init();
		if (LabelStyleBoxNM == null) 
		{
			LabelStyleBoxNM = new(5);
		}
		LabelStyleBoxNM.Init();
		OnInitialize();
	}
	public override void CopyTo(Data toData)
	{
		if (!(toData is LabelSettings to)) return;
		to.Clear();
		HeaderFont.CopyTo(to.HeaderFont);
		LabelFont.CopyTo(to.LabelFont);
		HeaderStyleBox.CopyTo(to.HeaderStyleBox);
		LabelStyleBox.CopyTo(to.LabelStyleBox);
		HeaderStyleBoxNM.CopyTo(to.HeaderStyleBoxNM);
		LabelStyleBoxNM.CopyTo(to.LabelStyleBoxNM);
	}
	public override void FieldCopyTo(Data toData, int field)
	{
		if (!(toData is LabelSettings to)) return;
		switch(field)
		{
			case 0:HeaderFont.CopyTo(to.HeaderFont); return;
			case 1:LabelFont.CopyTo(to.LabelFont); return;
			case 2:HeaderStyleBox.CopyTo(to.HeaderStyleBox); return;
			case 3:LabelStyleBox.CopyTo(to.LabelStyleBox); return;
			case 4:HeaderStyleBoxNM.CopyTo(to.HeaderStyleBoxNM); return;
			case 5:LabelStyleBoxNM.CopyTo(to.LabelStyleBoxNM); return;
		}
	}
	public override void WriteToBuf(SerializationBuffer sb, bool append=false)
	{
		if (!append) sb.Clear();
		if (!HeaderFont.IsDefault())
		{
			sb.WriteSize(0);
			HeaderFont.WriteToBuf(sb);
		}
		if (!LabelFont.IsDefault())
		{
			sb.WriteSize(1);
			LabelFont.WriteToBuf(sb);
		}
		if (!HeaderStyleBox.IsDefault())
		{
			sb.WriteSize(2);
			HeaderStyleBox.WriteToBuf(sb);
		}
		if (!LabelStyleBox.IsDefault())
		{
			sb.WriteSize(3);
			LabelStyleBox.WriteToBuf(sb);
		}
		if (!HeaderStyleBoxNM.IsDefault())
		{
			sb.WriteSize(4);
			HeaderStyleBoxNM.WriteToBuf(sb);
		}
		if (!LabelStyleBoxNM.IsDefault())
		{
			sb.WriteSize(5);
			LabelStyleBoxNM.WriteToBuf(sb);
		}
		sb.WriteSize(-1);
	}
	/// <summary>
	/// ReadFromBuf loads the data from the buffer into the object. 
	/// maxField is used by Table.Filter to only load the fields that are needed.
	/// </summary>
	public override void ReadFromBuf(SerializationBuffer sb, int maxField)
	{
		Clear();
		int fieldIndex;
		fieldIndex = sb.ReadSize();
		if (fieldIndex > maxField) return; 
		if (fieldIndex == 0)
		{
			HeaderFont.ReadFromBuf(sb);
			fieldIndex = sb.ReadSize();
			if (fieldIndex > maxField) return;
		}
		if (fieldIndex == 1)
		{
			LabelFont.ReadFromBuf(sb);
			fieldIndex = sb.ReadSize();
			if (fieldIndex > maxField) return;
		}
		if (fieldIndex == 2)
		{
			HeaderStyleBox.ReadFromBuf(sb);
			fieldIndex = sb.ReadSize();
			if (fieldIndex > maxField) return;
		}
		if (fieldIndex == 3)
		{
			LabelStyleBox.ReadFromBuf(sb);
			fieldIndex = sb.ReadSize();
			if (fieldIndex > maxField) return;
		}
		if (fieldIndex == 4)
		{
			HeaderStyleBoxNM.ReadFromBuf(sb);
			fieldIndex = sb.ReadSize();
			if (fieldIndex > maxField) return;
		}
		if (fieldIndex == 5)
		{
			LabelStyleBoxNM.ReadFromBuf(sb);
			fieldIndex = sb.ReadSize();
			if (fieldIndex > maxField) return;
		}
		// no need to do OnLoad we are in a filter
	}
	/// <summary>
	/// ReadFromBuf loads the data from the buffer into the object. 
	/// </summary>
	public override void ReadFromBuf(SerializationBuffer sb)
	{
		Clear();
		int fieldIndex;
		fieldIndex = sb.ReadSize();
		if (fieldIndex == 0)
		{
			HeaderFont.ReadFromBuf(sb);
			fieldIndex = sb.ReadSize();
		}
		if (fieldIndex == 1)
		{
			LabelFont.ReadFromBuf(sb);
			fieldIndex = sb.ReadSize();
		}
		if (fieldIndex == 2)
		{
			HeaderStyleBox.ReadFromBuf(sb);
			fieldIndex = sb.ReadSize();
		}
		if (fieldIndex == 3)
		{
			LabelStyleBox.ReadFromBuf(sb);
			fieldIndex = sb.ReadSize();
		}
		if (fieldIndex == 4)
		{
			HeaderStyleBoxNM.ReadFromBuf(sb);
			fieldIndex = sb.ReadSize();
		}
		if (fieldIndex == 5)
		{
			LabelStyleBoxNM.ReadFromBuf(sb);
			fieldIndex = sb.ReadSize();
		}
		OnLoad();
	}
	public override bool FieldIsDefault(int field)
	{
		switch(field)
		{
			case 0:return HeaderFont.IsDefault();
			case 1:return LabelFont.IsDefault();
			case 2:return HeaderStyleBox.IsDefault();
			case 3:return LabelStyleBox.IsDefault();
			case 4:return HeaderStyleBoxNM.IsDefault();
			case 5:return LabelStyleBoxNM.IsDefault();
		}
		return false;
	}
	public override bool FieldIsEqual(Data toFld, int field)
	{
		if (!(toFld is LabelSettings to)) return false;
		switch(field)
		{
			case 0:return HeaderFont.IsEqualTo(to.HeaderFont);
			case 1:return LabelFont.IsEqualTo(to.LabelFont);
			case 2:return HeaderStyleBox.IsEqualTo(to.HeaderStyleBox);
			case 3:return LabelStyleBox.IsEqualTo(to.LabelStyleBox);
			case 4:return HeaderStyleBoxNM.IsEqualTo(to.HeaderStyleBoxNM);
			case 5:return LabelStyleBoxNM.IsEqualTo(to.LabelStyleBoxNM);
		}
		return false;
	}
	public override string FieldAsString(int field)
	{
		switch(field)
		{
			case 0:return HeaderFont.AsString();
			case 1:return LabelFont.AsString();
			case 2:return HeaderStyleBox.AsString();
			case 3:return LabelStyleBox.AsString();
			case 4:return HeaderStyleBoxNM.AsString();
			case 5:return LabelStyleBoxNM.AsString();
		}
		return string.Empty;
	}
	public override void FieldFromString(string str, int field)
	{
		switch(field)
		{
			case 0:HeaderFont.FromString(str); return;
			case 1:LabelFont.FromString(str); return;
			case 2:HeaderStyleBox.FromString(str); return;
			case 3:LabelStyleBox.FromString(str); return;
			case 4:HeaderStyleBoxNM.FromString(str); return;
			case 5:LabelStyleBoxNM.FromString(str); return;
		}
		return;
	}
	public override string FieldName(int field)
	{
		if (field < 0 || field >= FieldCount) return string.Empty;
		return FieldNames[field];
	}
	public override string FieldLabel(int field)
	{
		if (field < 0 || field >= FieldCount) return string.Empty;
		return FieldLabels[field];
	}
	public override void FieldLabelSet(int field, string label)
	{
		if (field < 0 || field >= FieldCount) return;
		FieldLabels[field] = label;
	}
	public override string FieldColumnLabel(int field)
	{
		if (field < 0 || field >= FieldCount) return string.Empty;
		return ColumnLabels[field];
	}
	public override void FieldColumnLabelSet(int field, string label)
	{
		if (field < 0 || field >= FieldCount) return;
		ColumnLabels[field] = label;
	}
	public override void FieldMinSet(int field, object min)
	{
		if (field < 0 || field >= FieldCount) return;
		Min[field] = min;
	}
	public override object FieldMin(int field)
	{
		if (field < 0 || field >= FieldCount) return 0;
		return Min[field];
	}
	public override void FieldMaxSet(int field, object max)
	{
		if (field < 0 || field >= FieldCount) return;
		Max[field] = max;
	}
	public override object FieldMax(int field)
	{
		if (field < 0 || field >= FieldCount) return 0;
		return Max[field];
	}
	public override int FieldIdFromName(string name)
	{
		if (FieldIdLookup.TryGetValue(name, out int id)) return id;
		return -1;
	}
	/// <summary>
	/// Writes to sb the field formated as a key.
	/// maxSize is used for strings only.
	/// </summary>
	public override void FieldAsKey(int field, SerializationBuffer sb, int maxSize)
	{
		switch(field)
		{
			case 0:return; // DataField as key is not supported
			case 1:return; // DataField as key is not supported
			case 2:return; // DataField as key is not supported
			case 3:return; // DataField as key is not supported
			case 4:return; // DataField as key is not supported
			case 5:return; // DataField as key is not supported
		}
	}
	/// <summary>
	/// Returns the field as an object.
	/// </summary>
	public override Object FieldAsObject(int field)
	{
		switch(field)
		{
			case 0:return (Object)HeaderFont;
			case 1:return (Object)LabelFont;
			case 2:return (Object)HeaderStyleBox;
			case 3:return (Object)LabelStyleBox;
			case 4:return (Object)HeaderStyleBoxNM;
			case 5:return (Object)LabelStyleBoxNM;
		}
		return null;
	}
	/// <summary>
	/// Sets the field to an object.
	/// </summary>
	public override void FieldFromObject(Object o,  int field)
	{
		switch(field)
		{
			case 0:HeaderFont = (FontSettings.DataField) o; return;
			case 1:LabelFont = (FontSettings.DataField) o; return;
			case 2:HeaderStyleBox = (StyleBoxSettings.DataField) o; return;
			case 3:LabelStyleBox = (StyleBoxSettings.DataField) o; return;
			case 4:HeaderStyleBoxNM = (StyleBoxSettings.DataField) o; return;
			case 5:LabelStyleBoxNM = (StyleBoxSettings.DataField) o; return;
		}
	}
	/// <summary>
	/// Returns the field Type.
	/// </summary>
	public override Type FieldType(int field)
	{
		switch(field)
		{
			case 0:return HeaderFont.GetType();
			case 1:return LabelFont.GetType();
			case 2:return HeaderStyleBox.GetType();
			case 3:return LabelStyleBox.GetType();
			case 4:return HeaderStyleBoxNM.GetType();
			case 5:return LabelStyleBoxNM.GetType();
		}
		return null;
	}
	public partial class Context : DataContext<LabelSettings>
	{
		protected override void OnBaseConstruct()
		{
			Data = DataFactory<LabelSettings>.Rent();
		}
		public static Context Rent() => (Context) DataContextFactory<LabelSettings>.Rent();
		public override void Dispose()
		{
			DataContextFactory<LabelSettings>.Return(this);
		}
	}
	public static class FID
	{
		public const int HeaderFont = 0;
		public const int LabelFont = 1;
		public const int HeaderStyleBox = 2;
		public const int LabelStyleBox = 3;
		public const int HeaderStyleBoxNM = 4;
		public const int LabelStyleBoxNM = 5;
	}
	static object[] Min = { (int) 0,(int) 0,(int) 0,(int) 0,(int) 0,(int) 0, };
	static object[] Max = { (int) 0,(int) 0,(int) 0,(int) 0,(int) 0,(int) 0, };
	static string[] FieldLabels =
	{
		"Header Font",
		"Label Font",
		"Header Style Box",
		"Label Style Box",
		"Header Style Box NM",
		"Label Style Box NM",
	};
	static string[] ColumnLabels =
	{
		"Header Font",
		"Label Font",
		"Header Style Box",
		"Label Style Box",
		"Header Style Box NM",
		"Label Style Box NM",
	};
	static Dictionary<string, int> FieldIdLookup = new()
	{
		{ "HeaderFont", 0 },
		{ "LabelFont", 1 },
		{ "HeaderStyleBox", 2 },
		{ "LabelStyleBox", 3 },
		{ "HeaderStyleBoxNM", 4 },
		{ "LabelStyleBoxNM", 5 },
	};
	static string[] FieldNames =
	{
		"HeaderFont",
		"LabelFont",
		"HeaderStyleBox",
		"LabelStyleBox",
		"HeaderStyleBoxNM",
		"LabelStyleBoxNM",
	};
	static string[] TypeNames =
	{
		"DataField",
		"DataField",
		"DataField",
		"DataField",
		"DataField",
		"DataField",
	};
	public override string[] StaticTypeNames => TypeNames;
	static List<ValidationFunc>[] ValidationFuncs = new List<ValidationFunc>[6];
	public override List<ValidationFunc>[] StaticValidationFuncs => ValidationFuncs;
	public partial class Util : DataUtil<LabelSettings>
	{
	}
}
