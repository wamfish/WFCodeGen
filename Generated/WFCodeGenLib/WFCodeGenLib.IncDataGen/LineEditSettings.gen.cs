/// <auto-generated/>
using WFLib;
using Godot;
using System;
namespace WFCodeGen;
public partial class LineEditSettings : Data
{
	protected override void OnBaseConstruct()
	{
		Init();
	}
	public override int FieldCount => 18;
	public LineEditSettings Rent()=>DataFactory<LineEditSettings>.Rent();
	~LineEditSettings() => Dispose();
	public override void Dispose()
	{
		DataFactory<LineEditSettings>.Return(this);
		base.Dispose();
	}
	public override bool IsRecord => false;
	public partial class DataField : DataField<LineEditSettings>
	{
		public DataField(int field)
		{
			Field=field;
		}
		public Godot.Color SelectedColor => Data.SelectedColor;
		public Godot.Color UneditableColor => Data.UneditableColor;
		public Godot.Color PlaceholderColor => Data.PlaceholderColor;
		public Godot.Color OutlineColor => Data.OutlineColor;
		public Godot.Color CaretColor => Data.CaretColor;
		public Godot.Color SelectionColor => Data.SelectionColor;
		public Godot.Color ClearBtnColor => Data.ClearBtnColor;
		public Godot.Color ClearBtnPressedColor => Data.ClearBtnPressedColor;
		public int MinimumCharWidth => Data.MinimumCharWidth;
		public int OutlineSize => Data.OutlineSize;
		public int CaretWidth => Data.CaretWidth;
		public FontSettings.DataField Font => Data.Font;
		public StyleBoxSettings.DataField NormalStyleBox => Data.NormalStyleBox;
		public StyleBoxSettings.DataField ReadonlyStyleBox => Data.ReadonlyStyleBox;
		public StyleBoxSettings.DataField FocusStyleBox => Data.FocusStyleBox;
		public StyleBoxSettings.DataField NormalStyleBoxNM => Data.NormalStyleBoxNM;
		public StyleBoxSettings.DataField ReadonlyStyleBoxNM => Data.ReadonlyStyleBoxNM;
		public StyleBoxSettings.DataField FocusStyleBoxNM => Data.FocusStyleBoxNM;
	}
	public override void Clear()
	{
		SelectedColor = Godot.Colors.Black;
		UneditableColor = Godot.Colors.Black;
		PlaceholderColor = Godot.Colors.Black;
		OutlineColor = Godot.Colors.Black;
		CaretColor = Godot.Colors.Black;
		SelectionColor = Godot.Colors.Black;
		ClearBtnColor = Godot.Colors.Black;
		ClearBtnPressedColor = Godot.Colors.Black;
		MinimumCharWidth = 0;
		OutlineSize = 0;
		CaretWidth = 0;
		if (Font == null)
		{
			Font = new(11);
		}
		Font.Clear();
		if (NormalStyleBox == null)
		{
			NormalStyleBox = new(12);
		}
		NormalStyleBox.Clear();
		if (ReadonlyStyleBox == null)
		{
			ReadonlyStyleBox = new(13);
		}
		ReadonlyStyleBox.Clear();
		if (FocusStyleBox == null)
		{
			FocusStyleBox = new(14);
		}
		FocusStyleBox.Clear();
		if (NormalStyleBoxNM == null)
		{
			NormalStyleBoxNM = new(15);
		}
		NormalStyleBoxNM.Clear();
		if (ReadonlyStyleBoxNM == null)
		{
			ReadonlyStyleBoxNM = new(16);
		}
		ReadonlyStyleBoxNM.Clear();
		if (FocusStyleBoxNM == null)
		{
			FocusStyleBoxNM = new(17);
		}
		FocusStyleBoxNM.Clear();
		OnClear();
	}
	public override void Init()
	{
		SelectedColor = Colors.White;
		UneditableColor = Colors.DarkGray;
		PlaceholderColor = Colors.DarkGray;
		OutlineColor = Colors.DarkGray;
		CaretColor = Colors.White;
		SelectionColor = Gray7;
		ClearBtnColor = Colors.Blue;
		ClearBtnPressedColor = Colors.Green;
		MinimumCharWidth = 0;
		OutlineSize = 0;
		CaretWidth = 3;
		if (Font == null) 
		{
			Font = new(11);
		}
		Font.Init();
		if (NormalStyleBox == null) 
		{
			NormalStyleBox = new(12);
		}
		NormalStyleBox.Init();
		if (ReadonlyStyleBox == null) 
		{
			ReadonlyStyleBox = new(13);
		}
		ReadonlyStyleBox.Init();
		if (FocusStyleBox == null) 
		{
			FocusStyleBox = new(14);
		}
		FocusStyleBox.Init();
		if (NormalStyleBoxNM == null) 
		{
			NormalStyleBoxNM = new(15);
		}
		NormalStyleBoxNM.Init();
		if (ReadonlyStyleBoxNM == null) 
		{
			ReadonlyStyleBoxNM = new(16);
		}
		ReadonlyStyleBoxNM.Init();
		if (FocusStyleBoxNM == null) 
		{
			FocusStyleBoxNM = new(17);
		}
		FocusStyleBoxNM.Init();
		OnInitialize();
	}
	public override void CopyTo(Data toData)
	{
		if (!(toData is LineEditSettings to)) return;
		to.Clear();
		to.SelectedColor = SelectedColor;
		to.UneditableColor = UneditableColor;
		to.PlaceholderColor = PlaceholderColor;
		to.OutlineColor = OutlineColor;
		to.CaretColor = CaretColor;
		to.SelectionColor = SelectionColor;
		to.ClearBtnColor = ClearBtnColor;
		to.ClearBtnPressedColor = ClearBtnPressedColor;
		to.MinimumCharWidth = MinimumCharWidth;
		to.OutlineSize = OutlineSize;
		to.CaretWidth = CaretWidth;
		Font.CopyTo(to.Font);
		NormalStyleBox.CopyTo(to.NormalStyleBox);
		ReadonlyStyleBox.CopyTo(to.ReadonlyStyleBox);
		FocusStyleBox.CopyTo(to.FocusStyleBox);
		NormalStyleBoxNM.CopyTo(to.NormalStyleBoxNM);
		ReadonlyStyleBoxNM.CopyTo(to.ReadonlyStyleBoxNM);
		FocusStyleBoxNM.CopyTo(to.FocusStyleBoxNM);
	}
	public override void FieldCopyTo(Data toData, int field)
	{
		if (!(toData is LineEditSettings to)) return;
		switch(field)
		{
			case 0:to.SelectedColor = SelectedColor; return;
			case 1:to.UneditableColor = UneditableColor; return;
			case 2:to.PlaceholderColor = PlaceholderColor; return;
			case 3:to.OutlineColor = OutlineColor; return;
			case 4:to.CaretColor = CaretColor; return;
			case 5:to.SelectionColor = SelectionColor; return;
			case 6:to.ClearBtnColor = ClearBtnColor; return;
			case 7:to.ClearBtnPressedColor = ClearBtnPressedColor; return;
			case 8:to.MinimumCharWidth = MinimumCharWidth; return;
			case 9:to.OutlineSize = OutlineSize; return;
			case 10:to.CaretWidth = CaretWidth; return;
			case 11:Font.CopyTo(to.Font); return;
			case 12:NormalStyleBox.CopyTo(to.NormalStyleBox); return;
			case 13:ReadonlyStyleBox.CopyTo(to.ReadonlyStyleBox); return;
			case 14:FocusStyleBox.CopyTo(to.FocusStyleBox); return;
			case 15:NormalStyleBoxNM.CopyTo(to.NormalStyleBoxNM); return;
			case 16:ReadonlyStyleBoxNM.CopyTo(to.ReadonlyStyleBoxNM); return;
			case 17:FocusStyleBoxNM.CopyTo(to.FocusStyleBoxNM); return;
		}
	}
	public override void WriteToBuf(SerializationBuffer sb, bool append=false)
	{
		if (!append) sb.Clear();
		if (SelectedColor != Colors.Black)
		{
			sb.WriteSize(0);
			sb.Write(SelectedColor);
		}
		if (UneditableColor != Colors.Black)
		{
			sb.WriteSize(1);
			sb.Write(UneditableColor);
		}
		if (PlaceholderColor != Colors.Black)
		{
			sb.WriteSize(2);
			sb.Write(PlaceholderColor);
		}
		if (OutlineColor != Colors.Black)
		{
			sb.WriteSize(3);
			sb.Write(OutlineColor);
		}
		if (CaretColor != Colors.Black)
		{
			sb.WriteSize(4);
			sb.Write(CaretColor);
		}
		if (SelectionColor != Colors.Black)
		{
			sb.WriteSize(5);
			sb.Write(SelectionColor);
		}
		if (ClearBtnColor != Colors.Black)
		{
			sb.WriteSize(6);
			sb.Write(ClearBtnColor);
		}
		if (ClearBtnPressedColor != Colors.Black)
		{
			sb.WriteSize(7);
			sb.Write(ClearBtnPressedColor);
		}
		if (MinimumCharWidth != default)
		{
			sb.WriteSize(8);
			sb.Write(MinimumCharWidth);
		}
		if (OutlineSize != default)
		{
			sb.WriteSize(9);
			sb.Write(OutlineSize);
		}
		if (CaretWidth != default)
		{
			sb.WriteSize(10);
			sb.Write(CaretWidth);
		}
		if (!Font.IsDefault())
		{
			sb.WriteSize(11);
			Font.WriteToBuf(sb);
		}
		if (!NormalStyleBox.IsDefault())
		{
			sb.WriteSize(12);
			NormalStyleBox.WriteToBuf(sb);
		}
		if (!ReadonlyStyleBox.IsDefault())
		{
			sb.WriteSize(13);
			ReadonlyStyleBox.WriteToBuf(sb);
		}
		if (!FocusStyleBox.IsDefault())
		{
			sb.WriteSize(14);
			FocusStyleBox.WriteToBuf(sb);
		}
		if (!NormalStyleBoxNM.IsDefault())
		{
			sb.WriteSize(15);
			NormalStyleBoxNM.WriteToBuf(sb);
		}
		if (!ReadonlyStyleBoxNM.IsDefault())
		{
			sb.WriteSize(16);
			ReadonlyStyleBoxNM.WriteToBuf(sb);
		}
		if (!FocusStyleBoxNM.IsDefault())
		{
			sb.WriteSize(17);
			FocusStyleBoxNM.WriteToBuf(sb);
		}
		sb.WriteSize(-1);
	}
	/// <summary>
	/// ReadFromBuf loads the data from the buffer into the object. 
	/// maxField is used by Table.Filter to only load the fields that are needed.
	/// </summary>
	public override void ReadFromBuf(SerializationBuffer sb, int maxField)
	{
		Clear();
		int fieldIndex;
		fieldIndex = sb.ReadSize();
		if (fieldIndex > maxField) return; 
		if (fieldIndex == 0)
		{
			sb.Read(out SelectedColor);
			fieldIndex = sb.ReadSize();
			if (fieldIndex > maxField) return;
		}
		if (fieldIndex == 1)
		{
			sb.Read(out UneditableColor);
			fieldIndex = sb.ReadSize();
			if (fieldIndex > maxField) return;
		}
		if (fieldIndex == 2)
		{
			sb.Read(out PlaceholderColor);
			fieldIndex = sb.ReadSize();
			if (fieldIndex > maxField) return;
		}
		if (fieldIndex == 3)
		{
			sb.Read(out OutlineColor);
			fieldIndex = sb.ReadSize();
			if (fieldIndex > maxField) return;
		}
		if (fieldIndex == 4)
		{
			sb.Read(out CaretColor);
			fieldIndex = sb.ReadSize();
			if (fieldIndex > maxField) return;
		}
		if (fieldIndex == 5)
		{
			sb.Read(out SelectionColor);
			fieldIndex = sb.ReadSize();
			if (fieldIndex > maxField) return;
		}
		if (fieldIndex == 6)
		{
			sb.Read(out ClearBtnColor);
			fieldIndex = sb.ReadSize();
			if (fieldIndex > maxField) return;
		}
		if (fieldIndex == 7)
		{
			sb.Read(out ClearBtnPressedColor);
			fieldIndex = sb.ReadSize();
			if (fieldIndex > maxField) return;
		}
		if (fieldIndex == 8)
		{
			sb.Read(out MinimumCharWidth);
			fieldIndex = sb.ReadSize();
			if (fieldIndex > maxField) return;
		}
		if (fieldIndex == 9)
		{
			sb.Read(out OutlineSize);
			fieldIndex = sb.ReadSize();
			if (fieldIndex > maxField) return;
		}
		if (fieldIndex == 10)
		{
			sb.Read(out CaretWidth);
			fieldIndex = sb.ReadSize();
			if (fieldIndex > maxField) return;
		}
		if (fieldIndex == 11)
		{
			Font.ReadFromBuf(sb);
			fieldIndex = sb.ReadSize();
			if (fieldIndex > maxField) return;
		}
		if (fieldIndex == 12)
		{
			NormalStyleBox.ReadFromBuf(sb);
			fieldIndex = sb.ReadSize();
			if (fieldIndex > maxField) return;
		}
		if (fieldIndex == 13)
		{
			ReadonlyStyleBox.ReadFromBuf(sb);
			fieldIndex = sb.ReadSize();
			if (fieldIndex > maxField) return;
		}
		if (fieldIndex == 14)
		{
			FocusStyleBox.ReadFromBuf(sb);
			fieldIndex = sb.ReadSize();
			if (fieldIndex > maxField) return;
		}
		if (fieldIndex == 15)
		{
			NormalStyleBoxNM.ReadFromBuf(sb);
			fieldIndex = sb.ReadSize();
			if (fieldIndex > maxField) return;
		}
		if (fieldIndex == 16)
		{
			ReadonlyStyleBoxNM.ReadFromBuf(sb);
			fieldIndex = sb.ReadSize();
			if (fieldIndex > maxField) return;
		}
		if (fieldIndex == 17)
		{
			FocusStyleBoxNM.ReadFromBuf(sb);
			fieldIndex = sb.ReadSize();
			if (fieldIndex > maxField) return;
		}
		// no need to do OnLoad we are in a filter
	}
	/// <summary>
	/// ReadFromBuf loads the data from the buffer into the object. 
	/// </summary>
	public override void ReadFromBuf(SerializationBuffer sb)
	{
		Clear();
		int fieldIndex;
		fieldIndex = sb.ReadSize();
		if (fieldIndex == 0)
		{
			sb.Read(out SelectedColor);
			fieldIndex = sb.ReadSize();
		}
		if (fieldIndex == 1)
		{
			sb.Read(out UneditableColor);
			fieldIndex = sb.ReadSize();
		}
		if (fieldIndex == 2)
		{
			sb.Read(out PlaceholderColor);
			fieldIndex = sb.ReadSize();
		}
		if (fieldIndex == 3)
		{
			sb.Read(out OutlineColor);
			fieldIndex = sb.ReadSize();
		}
		if (fieldIndex == 4)
		{
			sb.Read(out CaretColor);
			fieldIndex = sb.ReadSize();
		}
		if (fieldIndex == 5)
		{
			sb.Read(out SelectionColor);
			fieldIndex = sb.ReadSize();
		}
		if (fieldIndex == 6)
		{
			sb.Read(out ClearBtnColor);
			fieldIndex = sb.ReadSize();
		}
		if (fieldIndex == 7)
		{
			sb.Read(out ClearBtnPressedColor);
			fieldIndex = sb.ReadSize();
		}
		if (fieldIndex == 8)
		{
			sb.Read(out MinimumCharWidth);
			fieldIndex = sb.ReadSize();
		}
		if (fieldIndex == 9)
		{
			sb.Read(out OutlineSize);
			fieldIndex = sb.ReadSize();
		}
		if (fieldIndex == 10)
		{
			sb.Read(out CaretWidth);
			fieldIndex = sb.ReadSize();
		}
		if (fieldIndex == 11)
		{
			Font.ReadFromBuf(sb);
			fieldIndex = sb.ReadSize();
		}
		if (fieldIndex == 12)
		{
			NormalStyleBox.ReadFromBuf(sb);
			fieldIndex = sb.ReadSize();
		}
		if (fieldIndex == 13)
		{
			ReadonlyStyleBox.ReadFromBuf(sb);
			fieldIndex = sb.ReadSize();
		}
		if (fieldIndex == 14)
		{
			FocusStyleBox.ReadFromBuf(sb);
			fieldIndex = sb.ReadSize();
		}
		if (fieldIndex == 15)
		{
			NormalStyleBoxNM.ReadFromBuf(sb);
			fieldIndex = sb.ReadSize();
		}
		if (fieldIndex == 16)
		{
			ReadonlyStyleBoxNM.ReadFromBuf(sb);
			fieldIndex = sb.ReadSize();
		}
		if (fieldIndex == 17)
		{
			FocusStyleBoxNM.ReadFromBuf(sb);
			fieldIndex = sb.ReadSize();
		}
		OnLoad();
	}
	public override bool FieldIsDefault(int field)
	{
		switch(field)
		{
			case 0:return SelectedColor == Colors.Black;
			case 1:return UneditableColor == Colors.Black;
			case 2:return PlaceholderColor == Colors.Black;
			case 3:return OutlineColor == Colors.Black;
			case 4:return CaretColor == Colors.Black;
			case 5:return SelectionColor == Colors.Black;
			case 6:return ClearBtnColor == Colors.Black;
			case 7:return ClearBtnPressedColor == Colors.Black;
			case 8:return MinimumCharWidth == default;
			case 9:return OutlineSize == default;
			case 10:return CaretWidth == default;
			case 11:return Font.IsDefault();
			case 12:return NormalStyleBox.IsDefault();
			case 13:return ReadonlyStyleBox.IsDefault();
			case 14:return FocusStyleBox.IsDefault();
			case 15:return NormalStyleBoxNM.IsDefault();
			case 16:return ReadonlyStyleBoxNM.IsDefault();
			case 17:return FocusStyleBoxNM.IsDefault();
		}
		return false;
	}
	public override bool FieldIsEqual(Data toFld, int field)
	{
		if (!(toFld is LineEditSettings to)) return false;
		switch(field)
		{
			case 0:return SelectedColor == to.SelectedColor;
			case 1:return UneditableColor == to.UneditableColor;
			case 2:return PlaceholderColor == to.PlaceholderColor;
			case 3:return OutlineColor == to.OutlineColor;
			case 4:return CaretColor == to.CaretColor;
			case 5:return SelectionColor == to.SelectionColor;
			case 6:return ClearBtnColor == to.ClearBtnColor;
			case 7:return ClearBtnPressedColor == to.ClearBtnPressedColor;
			case 8:return MinimumCharWidth == to.MinimumCharWidth;
			case 9:return OutlineSize == to.OutlineSize;
			case 10:return CaretWidth == to.CaretWidth;
			case 11:return Font.IsEqualTo(to.Font);
			case 12:return NormalStyleBox.IsEqualTo(to.NormalStyleBox);
			case 13:return ReadonlyStyleBox.IsEqualTo(to.ReadonlyStyleBox);
			case 14:return FocusStyleBox.IsEqualTo(to.FocusStyleBox);
			case 15:return NormalStyleBoxNM.IsEqualTo(to.NormalStyleBoxNM);
			case 16:return ReadonlyStyleBoxNM.IsEqualTo(to.ReadonlyStyleBoxNM);
			case 17:return FocusStyleBoxNM.IsEqualTo(to.FocusStyleBoxNM);
		}
		return false;
	}
	public override string FieldAsString(int field)
	{
		switch(field)
		{
			case 0:return SelectedColor.AsString();
			case 1:return UneditableColor.AsString();
			case 2:return PlaceholderColor.AsString();
			case 3:return OutlineColor.AsString();
			case 4:return CaretColor.AsString();
			case 5:return SelectionColor.AsString();
			case 6:return ClearBtnColor.AsString();
			case 7:return ClearBtnPressedColor.AsString();
			case 8:return MinimumCharWidth.AsString();
			case 9:return OutlineSize.AsString();
			case 10:return CaretWidth.AsString();
			case 11:return Font.AsString();
			case 12:return NormalStyleBox.AsString();
			case 13:return ReadonlyStyleBox.AsString();
			case 14:return FocusStyleBox.AsString();
			case 15:return NormalStyleBoxNM.AsString();
			case 16:return ReadonlyStyleBoxNM.AsString();
			case 17:return FocusStyleBoxNM.AsString();
		}
		return string.Empty;
	}
	public override void FieldFromString(string str, int field)
	{
		switch(field)
		{
			case 0:SelectedColor = str.AsColor(); return;
			case 1:UneditableColor = str.AsColor(); return;
			case 2:PlaceholderColor = str.AsColor(); return;
			case 3:OutlineColor = str.AsColor(); return;
			case 4:CaretColor = str.AsColor(); return;
			case 5:SelectionColor = str.AsColor(); return;
			case 6:ClearBtnColor = str.AsColor(); return;
			case 7:ClearBtnPressedColor = str.AsColor(); return;
			case 8:MinimumCharWidth = str.AsInt(); return;
			case 9:OutlineSize = str.AsInt(); return;
			case 10:CaretWidth = str.AsInt(); return;
			case 11:Font.FromString(str); return;
			case 12:NormalStyleBox.FromString(str); return;
			case 13:ReadonlyStyleBox.FromString(str); return;
			case 14:FocusStyleBox.FromString(str); return;
			case 15:NormalStyleBoxNM.FromString(str); return;
			case 16:ReadonlyStyleBoxNM.FromString(str); return;
			case 17:FocusStyleBoxNM.FromString(str); return;
		}
		return;
	}
	public override string FieldName(int field)
	{
		if (field < 0 || field >= FieldCount) return string.Empty;
		return FieldNames[field];
	}
	public override string FieldLabel(int field)
	{
		if (field < 0 || field >= FieldCount) return string.Empty;
		return FieldLabels[field];
	}
	public override void FieldLabelSet(int field, string label)
	{
		if (field < 0 || field >= FieldCount) return;
		FieldLabels[field] = label;
	}
	public override string FieldColumnLabel(int field)
	{
		if (field < 0 || field >= FieldCount) return string.Empty;
		return ColumnLabels[field];
	}
	public override void FieldColumnLabelSet(int field, string label)
	{
		if (field < 0 || field >= FieldCount) return;
		ColumnLabels[field] = label;
	}
	public override void FieldMinSet(int field, object min)
	{
		if (field < 0 || field >= FieldCount) return;
		Min[field] = min;
	}
	public override object FieldMin(int field)
	{
		if (field < 0 || field >= FieldCount) return 0;
		return Min[field];
	}
	public override void FieldMaxSet(int field, object max)
	{
		if (field < 0 || field >= FieldCount) return;
		Max[field] = max;
	}
	public override object FieldMax(int field)
	{
		if (field < 0 || field >= FieldCount) return 0;
		return Max[field];
	}
	public override int FieldIdFromName(string name)
	{
		if (FieldIdLookup.TryGetValue(name, out int id)) return id;
		return -1;
	}
	/// <summary>
	/// Writes to sb the field formated as a key.
	/// maxSize is used for strings only.
	/// </summary>
	public override void FieldAsKey(int field, SerializationBuffer sb, int maxSize)
	{
		switch(field)
		{
			case 0:sb.Write(SelectedColor); return;
			case 1:sb.Write(UneditableColor); return;
			case 2:sb.Write(PlaceholderColor); return;
			case 3:sb.Write(OutlineColor); return;
			case 4:sb.Write(CaretColor); return;
			case 5:sb.Write(SelectionColor); return;
			case 6:sb.Write(ClearBtnColor); return;
			case 7:sb.Write(ClearBtnPressedColor); return;
			case 8:sb.Write(MinimumCharWidth); return;
			case 9:sb.Write(OutlineSize); return;
			case 10:sb.Write(CaretWidth); return;
			case 11:return; // DataField as key is not supported
			case 12:return; // DataField as key is not supported
			case 13:return; // DataField as key is not supported
			case 14:return; // DataField as key is not supported
			case 15:return; // DataField as key is not supported
			case 16:return; // DataField as key is not supported
			case 17:return; // DataField as key is not supported
		}
	}
	/// <summary>
	/// Returns the field as an object.
	/// </summary>
	public override Object FieldAsObject(int field)
	{
		switch(field)
		{
			case 0:return (Object)SelectedColor;
			case 1:return (Object)UneditableColor;
			case 2:return (Object)PlaceholderColor;
			case 3:return (Object)OutlineColor;
			case 4:return (Object)CaretColor;
			case 5:return (Object)SelectionColor;
			case 6:return (Object)ClearBtnColor;
			case 7:return (Object)ClearBtnPressedColor;
			case 8:return (Object)MinimumCharWidth;
			case 9:return (Object)OutlineSize;
			case 10:return (Object)CaretWidth;
			case 11:return (Object)Font;
			case 12:return (Object)NormalStyleBox;
			case 13:return (Object)ReadonlyStyleBox;
			case 14:return (Object)FocusStyleBox;
			case 15:return (Object)NormalStyleBoxNM;
			case 16:return (Object)ReadonlyStyleBoxNM;
			case 17:return (Object)FocusStyleBoxNM;
		}
		return null;
	}
	/// <summary>
	/// Sets the field to an object.
	/// </summary>
	public override void FieldFromObject(Object o,  int field)
	{
		switch(field)
		{
			case 0:SelectedColor = (Color) o; return;
			case 1:UneditableColor = (Color) o; return;
			case 2:PlaceholderColor = (Color) o; return;
			case 3:OutlineColor = (Color) o; return;
			case 4:CaretColor = (Color) o; return;
			case 5:SelectionColor = (Color) o; return;
			case 6:ClearBtnColor = (Color) o; return;
			case 7:ClearBtnPressedColor = (Color) o; return;
			case 8:MinimumCharWidth = (int) o; return;
			case 9:OutlineSize = (int) o; return;
			case 10:CaretWidth = (int) o; return;
			case 11:Font = (FontSettings.DataField) o; return;
			case 12:NormalStyleBox = (StyleBoxSettings.DataField) o; return;
			case 13:ReadonlyStyleBox = (StyleBoxSettings.DataField) o; return;
			case 14:FocusStyleBox = (StyleBoxSettings.DataField) o; return;
			case 15:NormalStyleBoxNM = (StyleBoxSettings.DataField) o; return;
			case 16:ReadonlyStyleBoxNM = (StyleBoxSettings.DataField) o; return;
			case 17:FocusStyleBoxNM = (StyleBoxSettings.DataField) o; return;
		}
	}
	/// <summary>
	/// Returns the field Type.
	/// </summary>
	public override Type FieldType(int field)
	{
		switch(field)
		{
			case 0:return SelectedColor.GetType();
			case 1:return UneditableColor.GetType();
			case 2:return PlaceholderColor.GetType();
			case 3:return OutlineColor.GetType();
			case 4:return CaretColor.GetType();
			case 5:return SelectionColor.GetType();
			case 6:return ClearBtnColor.GetType();
			case 7:return ClearBtnPressedColor.GetType();
			case 8:return MinimumCharWidth.GetType();
			case 9:return OutlineSize.GetType();
			case 10:return CaretWidth.GetType();
			case 11:return Font.GetType();
			case 12:return NormalStyleBox.GetType();
			case 13:return ReadonlyStyleBox.GetType();
			case 14:return FocusStyleBox.GetType();
			case 15:return NormalStyleBoxNM.GetType();
			case 16:return ReadonlyStyleBoxNM.GetType();
			case 17:return FocusStyleBoxNM.GetType();
		}
		return null;
	}
	public partial class Context : DataContext<LineEditSettings>
	{
		protected override void OnBaseConstruct()
		{
			Data = DataFactory<LineEditSettings>.Rent();
		}
		public static Context Rent() => (Context) DataContextFactory<LineEditSettings>.Rent();
		public override void Dispose()
		{
			DataContextFactory<LineEditSettings>.Return(this);
		}
	}
	public static class FID
	{
		public const int SelectedColor = 0;
		public const int UneditableColor = 1;
		public const int PlaceholderColor = 2;
		public const int OutlineColor = 3;
		public const int CaretColor = 4;
		public const int SelectionColor = 5;
		public const int ClearBtnColor = 6;
		public const int ClearBtnPressedColor = 7;
		public const int MinimumCharWidth = 8;
		public const int OutlineSize = 9;
		public const int CaretWidth = 10;
		public const int Font = 11;
		public const int NormalStyleBox = 12;
		public const int ReadonlyStyleBox = 13;
		public const int FocusStyleBox = 14;
		public const int NormalStyleBoxNM = 15;
		public const int ReadonlyStyleBoxNM = 16;
		public const int FocusStyleBoxNM = 17;
	}
	static object[] Min = { (int) 0,(int) 0,(int) 0,(int) 0,(int) 0,(int) 0,(int) 0,(int) 0,(int) -2147483648,(int) -2147483648,(int) -2147483648,(int) 0,(int) 0,(int) 0,(int) 0,(int) 0,(int) 0,(int) 0, };
	static object[] Max = { (int) 0,(int) 0,(int) 0,(int) 0,(int) 0,(int) 0,(int) 0,(int) 0,(int) 2147483647,(int) 2147483647,(int) 2147483647,(int) 0,(int) 0,(int) 0,(int) 0,(int) 0,(int) 0,(int) 0, };
	static string[] FieldLabels =
	{
		"Selected Color",
		"Uneditable Color",
		"Placeholder Color",
		"Outline Color",
		"Caret Color",
		"Selection Color",
		"Clear Btn Color",
		"Clear Btn Pressed Color",
		"Minimum Char Width",
		"Outline Size",
		"Caret Width",
		"Font",
		"Normal Style Box",
		"Readonly Style Box",
		"Focus Style Box",
		"Normal Style Box NM",
		"Readonly Style Box NM",
		"Focus Style Box NM",
	};
	static string[] ColumnLabels =
	{
		"Selected Color",
		"Uneditable Color",
		"Placeholder Color",
		"Outline Color",
		"Caret Color",
		"Selection Color",
		"Clear Btn Color",
		"Clear Btn Pressed Color",
		"Minimum Char Width",
		"Outline Size",
		"Caret Width",
		"Font",
		"Normal Style Box",
		"Readonly Style Box",
		"Focus Style Box",
		"Normal Style Box NM",
		"Readonly Style Box NM",
		"Focus Style Box NM",
	};
	static Dictionary<string, int> FieldIdLookup = new()
	{
		{ "SelectedColor", 0 },
		{ "UneditableColor", 1 },
		{ "PlaceholderColor", 2 },
		{ "OutlineColor", 3 },
		{ "CaretColor", 4 },
		{ "SelectionColor", 5 },
		{ "ClearBtnColor", 6 },
		{ "ClearBtnPressedColor", 7 },
		{ "MinimumCharWidth", 8 },
		{ "OutlineSize", 9 },
		{ "CaretWidth", 10 },
		{ "Font", 11 },
		{ "NormalStyleBox", 12 },
		{ "ReadonlyStyleBox", 13 },
		{ "FocusStyleBox", 14 },
		{ "NormalStyleBoxNM", 15 },
		{ "ReadonlyStyleBoxNM", 16 },
		{ "FocusStyleBoxNM", 17 },
	};
	static string[] FieldNames =
	{
		"SelectedColor",
		"UneditableColor",
		"PlaceholderColor",
		"OutlineColor",
		"CaretColor",
		"SelectionColor",
		"ClearBtnColor",
		"ClearBtnPressedColor",
		"MinimumCharWidth",
		"OutlineSize",
		"CaretWidth",
		"Font",
		"NormalStyleBox",
		"ReadonlyStyleBox",
		"FocusStyleBox",
		"NormalStyleBoxNM",
		"ReadonlyStyleBoxNM",
		"FocusStyleBoxNM",
	};
	static string[] TypeNames =
	{
		"Color",
		"Color",
		"Color",
		"Color",
		"Color",
		"Color",
		"Color",
		"Color",
		"int",
		"int",
		"int",
		"DataField",
		"DataField",
		"DataField",
		"DataField",
		"DataField",
		"DataField",
		"DataField",
	};
	public override string[] StaticTypeNames => TypeNames;
	static List<ValidationFunc>[] ValidationFuncs = new List<ValidationFunc>[18];
	public override List<ValidationFunc>[] StaticValidationFuncs => ValidationFuncs;
	public partial class Util : DataUtil<LineEditSettings>
	{
	}
}
