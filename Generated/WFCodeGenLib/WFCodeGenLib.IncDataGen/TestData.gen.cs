/// <auto-generated/>
using WFLib;
using Godot;
using System;
namespace WFCodeGen;
public partial class TestData : Data
{
	protected override void OnBaseConstruct()
	{
		Init();
	}
	public override int FieldCount => 2;
	public TestData Rent()=>DataFactory<TestData>.Rent();
	~TestData() => Dispose();
	public override void Dispose()
	{
		DataFactory<TestData>.Return(this);
		base.Dispose();
	}
	public override bool IsRecord => false;
	public partial class DataField : DataField<TestData>
	{
		public DataField(int field)
		{
			Field=field;
		}
		public int DataInt => Data.DataInt;
		public string DataString => Data.DataString;
	}
	public override void Clear()
	{
		DataInt = 0;
		DataString = string.Empty;
		OnClear();
	}
	public override void Init()
	{
		DataInt = 0;
		DataString = string.Empty;
		OnInitialize();
	}
	public override void CopyTo(Data toData)
	{
		if (!(toData is TestData to)) return;
		to.Clear();
		to.DataInt = DataInt;
		to.DataString = DataString;
	}
	public override void FieldCopyTo(Data toData, int field)
	{
		if (!(toData is TestData to)) return;
		switch(field)
		{
			case 0:to.DataInt = DataInt; return;
			case 1:to.DataString = DataString; return;
		}
	}
	public override void WriteToBuf(SerializationBuffer sb, bool append=false)
	{
		if (!append) sb.Clear();
		if (DataInt != default)
		{
			sb.WriteSize(0);
			sb.Write(DataInt);
		}
		if (DataString != default)
		{
			sb.WriteSize(1);
			sb.Write(DataString);
		}
		sb.WriteSize(-1);
	}
	/// <summary>
	/// ReadFromBuf loads the data from the buffer into the object. 
	/// maxField is used by Table.Filter to only load the fields that are needed.
	/// </summary>
	public override void ReadFromBuf(SerializationBuffer sb, int maxField)
	{
		Clear();
		int fieldIndex;
		fieldIndex = sb.ReadSize();
		if (fieldIndex > maxField) return; 
		if (fieldIndex == 0)
		{
			DataInt = sb.ReadInt();
			fieldIndex = sb.ReadSize();
			if (fieldIndex > maxField) return;
		}
		if (fieldIndex == 1)
		{
			DataString = sb.ReadString();
			fieldIndex = sb.ReadSize();
			if (fieldIndex > maxField) return;
		}
		// no need to do OnLoad we are in a filter
	}
	/// <summary>
	/// ReadFromBuf loads the data from the buffer into the object. 
	/// </summary>
	public override void ReadFromBuf(SerializationBuffer sb)
	{
		Clear();
		int fieldIndex;
		fieldIndex = sb.ReadSize();
		if (fieldIndex == 0)
		{
			DataInt = sb.ReadInt();
			fieldIndex = sb.ReadSize();
		}
		if (fieldIndex == 1)
		{
			DataString = sb.ReadString();
			fieldIndex = sb.ReadSize();
		}
		OnLoad();
	}
	public override bool FieldIsDefault(int field)
	{
		switch(field)
		{
			case 0:return DataInt == default;
			case 1:return DataString == string.Empty;
		}
		return false;
	}
	public override bool FieldIsEqual(Data toFld, int field)
	{
		if (!(toFld is TestData to)) return false;
		switch(field)
		{
			case 0:return DataInt == to.DataInt;
			case 1:return DataString == to.DataString;
		}
		return false;
	}
	public override string FieldAsString(int field)
	{
		switch(field)
		{
			case 0:return DataInt.AsString();
			case 1:return DataString;
		}
		return string.Empty;
	}
	public override void FieldFromString(string str, int field)
	{
		switch(field)
		{
			case 0:DataInt = str.AsInt(); return;
			case 1:DataString = str; return;
		}
		return;
	}
	public override string FieldName(int field)
	{
		if (field < 0 || field >= FieldCount) return string.Empty;
		return FieldNames[field];
	}
	public override string FieldLabel(int field)
	{
		if (field < 0 || field >= FieldCount) return string.Empty;
		return FieldLabels[field];
	}
	public override void FieldLabelSet(int field, string label)
	{
		if (field < 0 || field >= FieldCount) return;
		FieldLabels[field] = label;
	}
	public override string FieldColumnLabel(int field)
	{
		if (field < 0 || field >= FieldCount) return string.Empty;
		return ColumnLabels[field];
	}
	public override void FieldColumnLabelSet(int field, string label)
	{
		if (field < 0 || field >= FieldCount) return;
		ColumnLabels[field] = label;
	}
	public override void FieldMinSet(int field, object min)
	{
		if (field < 0 || field >= FieldCount) return;
		Min[field] = min;
	}
	public override object FieldMin(int field)
	{
		if (field < 0 || field >= FieldCount) return 0;
		return Min[field];
	}
	public override void FieldMaxSet(int field, object max)
	{
		if (field < 0 || field >= FieldCount) return;
		Max[field] = max;
	}
	public override object FieldMax(int field)
	{
		if (field < 0 || field >= FieldCount) return 0;
		return Max[field];
	}
	public override int FieldIdFromName(string name)
	{
		if (FieldIdLookup.TryGetValue(name, out int id)) return id;
		return -1;
	}
	/// <summary>
	/// Writes to sb the field formated as a key.
	/// maxSize is used for strings only.
	/// </summary>
	public override void FieldAsKey(int field, SerializationBuffer sb, int maxSize)
	{
		switch(field)
		{
			case 0:sb.Write(DataInt); return;
			case 1:DataString.AsKey(sb, maxSize); return;
		}
	}
	/// <summary>
	/// Returns the field as an object.
	/// </summary>
	public override Object FieldAsObject(int field)
	{
		switch(field)
		{
			case 0:return (Object)DataInt;
			case 1:return (Object)DataString;
		}
		return null;
	}
	/// <summary>
	/// Sets the field to an object.
	/// </summary>
	public override void FieldFromObject(Object o,  int field)
	{
		switch(field)
		{
			case 0:DataInt = (int) o; return;
			case 1:DataString = (string) o; return;
		}
	}
	/// <summary>
	/// Returns the field Type.
	/// </summary>
	public override Type FieldType(int field)
	{
		switch(field)
		{
			case 0:return DataInt.GetType();
			case 1:return DataString.GetType();
		}
		return null;
	}
	public partial class Context : DataContext<TestData>
	{
		protected override void OnBaseConstruct()
		{
			Data = DataFactory<TestData>.Rent();
		}
		public static Context Rent() => (Context) DataContextFactory<TestData>.Rent();
		public override void Dispose()
		{
			DataContextFactory<TestData>.Return(this);
		}
	}
	public static class FID
	{
		public const int DataInt = 0;
		public const int DataString = 1;
	}
	static object[] Min = { (int) -2147483648,(int) 0, };
	static object[] Max = { (int) 2147483647,(int) 0, };
	static string[] FieldLabels =
	{
		"Data Int",
		"Data String",
	};
	static string[] ColumnLabels =
	{
		"Data Int",
		"Data String",
	};
	static Dictionary<string, int> FieldIdLookup = new()
	{
		{ "DataInt", 0 },
		{ "DataString", 1 },
	};
	static string[] FieldNames =
	{
		"DataInt",
		"DataString",
	};
	static string[] TypeNames =
	{
		"int",
		"string",
	};
	public override string[] StaticTypeNames => TypeNames;
	static List<ValidationFunc>[] ValidationFuncs = new List<ValidationFunc>[2];
	public override List<ValidationFunc>[] StaticValidationFuncs => ValidationFuncs;
	public partial class Util : DataUtil<TestData>
	{
	}
}
