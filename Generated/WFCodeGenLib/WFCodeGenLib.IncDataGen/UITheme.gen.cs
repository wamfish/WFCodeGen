/// <auto-generated/>
using WFLib;
using Godot;
using System;
namespace WFCodeGen;
public partial class UITheme : Record
{
	protected override void OnBaseConstruct()
	{
		Init();
	}
	public override int FieldCount => 23;
	public UITheme Rent()=>RecordFactory<UITheme>.Rent();
	public override void InitContextFactory()
	{
		Context.InitContextFactory();
	}
	~UITheme() => Dispose();
	public override void Dispose()
	{
		RecordFactory<UITheme>.Return(this);
		base.Dispose();
	}
	public override bool IsRecord => true;
	public override void Clear()
	{
		StatusCode = 0;
		ID = 0;
		Timestamp = DateTime.MinValue;
		EditByID = 0;
		if (WindowFont == null)
		{
			WindowFont = new(4);
		}
		WindowFont.Clear();
		if (WindowStyleBox == null)
		{
			WindowStyleBox = new(5);
		}
		WindowStyleBox.Clear();
		if (TitleBarFont == null)
		{
			TitleBarFont = new(6);
		}
		TitleBarFont.Clear();
		if (TitleBarStyleBox == null)
		{
			TitleBarStyleBox = new(7);
		}
		TitleBarStyleBox.Clear();
		if (ActionItemFont == null)
		{
			ActionItemFont = new(8);
		}
		ActionItemFont.Clear();
		if (ActionItemStyleBox == null)
		{
			ActionItemStyleBox = new(9);
		}
		ActionItemStyleBox.Clear();
		if (ActionBarStyleBox == null)
		{
			ActionBarStyleBox = new(10);
		}
		ActionBarStyleBox.Clear();
		if (DockStyleBox == null)
		{
			DockStyleBox = new(11);
		}
		DockStyleBox.Clear();
		if (DockableStyleBox == null)
		{
			DockableStyleBox = new(12);
		}
		DockableStyleBox.Clear();
		if (ContentStyleBox == null)
		{
			ContentStyleBox = new(13);
		}
		ContentStyleBox.Clear();
		if (VertDockSliderStyleBox == null)
		{
			VertDockSliderStyleBox = new(14);
		}
		VertDockSliderStyleBox.Clear();
		if (HorztDockSliderStyleBox == null)
		{
			HorztDockSliderStyleBox = new(15);
		}
		HorztDockSliderStyleBox.Clear();
		if (EmptyStyleBox == null)
		{
			EmptyStyleBox = new(16);
		}
		EmptyStyleBox.Clear();
		if (Button == null)
		{
			Button = new(17);
		}
		Button.Clear();
		if (Label == null)
		{
			Label = new(18);
		}
		Label.Clear();
		if (LineEdit == null)
		{
			LineEdit = new(19);
		}
		LineEdit.Clear();
		if (Scrollbar == null)
		{
			Scrollbar = new(20);
		}
		Scrollbar.Clear();
		if (TabContainer == null)
		{
			TabContainer = new(21);
		}
		TabContainer.Clear();
		if (CheckBox == null)
		{
			CheckBox = new(22);
		}
		CheckBox.Clear();
		OnClear();
	}
	public override void Init()
	{
		StatusCode = 0;
		ID = 0;
		Timestamp = DateTime.MinValue;
		EditByID = 0;
		if (WindowFont == null) 
		{
			WindowFont = new(4);
		}
		WindowFont.Init();
		if (WindowStyleBox == null) 
		{
			WindowStyleBox = new(5);
		}
		WindowStyleBox.Init();
		if (TitleBarFont == null) 
		{
			TitleBarFont = new(6);
		}
		TitleBarFont.Init();
		if (TitleBarStyleBox == null) 
		{
			TitleBarStyleBox = new(7);
		}
		TitleBarStyleBox.Init();
		if (ActionItemFont == null) 
		{
			ActionItemFont = new(8);
		}
		ActionItemFont.Init();
		if (ActionItemStyleBox == null) 
		{
			ActionItemStyleBox = new(9);
		}
		ActionItemStyleBox.Init();
		if (ActionBarStyleBox == null) 
		{
			ActionBarStyleBox = new(10);
		}
		ActionBarStyleBox.Init();
		if (DockStyleBox == null) 
		{
			DockStyleBox = new(11);
		}
		DockStyleBox.Init();
		if (DockableStyleBox == null) 
		{
			DockableStyleBox = new(12);
		}
		DockableStyleBox.Init();
		if (ContentStyleBox == null) 
		{
			ContentStyleBox = new(13);
		}
		ContentStyleBox.Init();
		if (VertDockSliderStyleBox == null) 
		{
			VertDockSliderStyleBox = new(14);
		}
		VertDockSliderStyleBox.Init();
		if (HorztDockSliderStyleBox == null) 
		{
			HorztDockSliderStyleBox = new(15);
		}
		HorztDockSliderStyleBox.Init();
		if (EmptyStyleBox == null) 
		{
			EmptyStyleBox = new(16);
		}
		EmptyStyleBox.Init();
		if (Button == null) 
		{
			Button = new(17);
		}
		Button.Init();
		if (Label == null) 
		{
			Label = new(18);
		}
		Label.Init();
		if (LineEdit == null) 
		{
			LineEdit = new(19);
		}
		LineEdit.Init();
		if (Scrollbar == null) 
		{
			Scrollbar = new(20);
		}
		Scrollbar.Init();
		if (TabContainer == null) 
		{
			TabContainer = new(21);
		}
		TabContainer.Init();
		if (CheckBox == null) 
		{
			CheckBox = new(22);
		}
		CheckBox.Init();
		OnInitialize();
	}
	public override void CopyTo(Data toData)
	{
		if (!(toData is UITheme to)) return;
		to.Clear();
		to.StatusCode = StatusCode;
		to.ID = ID;
		to.Timestamp = Timestamp;
		to.EditByID = EditByID;
		WindowFont.CopyTo(to.WindowFont);
		WindowStyleBox.CopyTo(to.WindowStyleBox);
		TitleBarFont.CopyTo(to.TitleBarFont);
		TitleBarStyleBox.CopyTo(to.TitleBarStyleBox);
		ActionItemFont.CopyTo(to.ActionItemFont);
		ActionItemStyleBox.CopyTo(to.ActionItemStyleBox);
		ActionBarStyleBox.CopyTo(to.ActionBarStyleBox);
		DockStyleBox.CopyTo(to.DockStyleBox);
		DockableStyleBox.CopyTo(to.DockableStyleBox);
		ContentStyleBox.CopyTo(to.ContentStyleBox);
		VertDockSliderStyleBox.CopyTo(to.VertDockSliderStyleBox);
		HorztDockSliderStyleBox.CopyTo(to.HorztDockSliderStyleBox);
		EmptyStyleBox.CopyTo(to.EmptyStyleBox);
		Button.CopyTo(to.Button);
		Label.CopyTo(to.Label);
		LineEdit.CopyTo(to.LineEdit);
		Scrollbar.CopyTo(to.Scrollbar);
		TabContainer.CopyTo(to.TabContainer);
		CheckBox.CopyTo(to.CheckBox);
	}
	public override void FieldCopyTo(Data toData, int field)
	{
		if (!(toData is UITheme to)) return;
		switch(field)
		{
			case 0:to.StatusCode = StatusCode; return;
			case 1:to.ID = ID; return;
			case 2:to.Timestamp = Timestamp; return;
			case 3:to.EditByID = EditByID; return;
			case 4:WindowFont.CopyTo(to.WindowFont); return;
			case 5:WindowStyleBox.CopyTo(to.WindowStyleBox); return;
			case 6:TitleBarFont.CopyTo(to.TitleBarFont); return;
			case 7:TitleBarStyleBox.CopyTo(to.TitleBarStyleBox); return;
			case 8:ActionItemFont.CopyTo(to.ActionItemFont); return;
			case 9:ActionItemStyleBox.CopyTo(to.ActionItemStyleBox); return;
			case 10:ActionBarStyleBox.CopyTo(to.ActionBarStyleBox); return;
			case 11:DockStyleBox.CopyTo(to.DockStyleBox); return;
			case 12:DockableStyleBox.CopyTo(to.DockableStyleBox); return;
			case 13:ContentStyleBox.CopyTo(to.ContentStyleBox); return;
			case 14:VertDockSliderStyleBox.CopyTo(to.VertDockSliderStyleBox); return;
			case 15:HorztDockSliderStyleBox.CopyTo(to.HorztDockSliderStyleBox); return;
			case 16:EmptyStyleBox.CopyTo(to.EmptyStyleBox); return;
			case 17:Button.CopyTo(to.Button); return;
			case 18:Label.CopyTo(to.Label); return;
			case 19:LineEdit.CopyTo(to.LineEdit); return;
			case 20:Scrollbar.CopyTo(to.Scrollbar); return;
			case 21:TabContainer.CopyTo(to.TabContainer); return;
			case 22:CheckBox.CopyTo(to.CheckBox); return;
		}
	}
	public override void WriteToBuf(SerializationBuffer sb, bool append=false)
	{
		if (!append) sb.Clear();
		sb.Write(StatusCode);
		sb.Write(ID);
		sb.Write(Timestamp);
		sb.Write(EditByID);
		if (!WindowFont.IsDefault())
		{
			sb.WriteSize(4);
			WindowFont.WriteToBuf(sb);
		}
		if (!WindowStyleBox.IsDefault())
		{
			sb.WriteSize(5);
			WindowStyleBox.WriteToBuf(sb);
		}
		if (!TitleBarFont.IsDefault())
		{
			sb.WriteSize(6);
			TitleBarFont.WriteToBuf(sb);
		}
		if (!TitleBarStyleBox.IsDefault())
		{
			sb.WriteSize(7);
			TitleBarStyleBox.WriteToBuf(sb);
		}
		if (!ActionItemFont.IsDefault())
		{
			sb.WriteSize(8);
			ActionItemFont.WriteToBuf(sb);
		}
		if (!ActionItemStyleBox.IsDefault())
		{
			sb.WriteSize(9);
			ActionItemStyleBox.WriteToBuf(sb);
		}
		if (!ActionBarStyleBox.IsDefault())
		{
			sb.WriteSize(10);
			ActionBarStyleBox.WriteToBuf(sb);
		}
		if (!DockStyleBox.IsDefault())
		{
			sb.WriteSize(11);
			DockStyleBox.WriteToBuf(sb);
		}
		if (!DockableStyleBox.IsDefault())
		{
			sb.WriteSize(12);
			DockableStyleBox.WriteToBuf(sb);
		}
		if (!ContentStyleBox.IsDefault())
		{
			sb.WriteSize(13);
			ContentStyleBox.WriteToBuf(sb);
		}
		if (!VertDockSliderStyleBox.IsDefault())
		{
			sb.WriteSize(14);
			VertDockSliderStyleBox.WriteToBuf(sb);
		}
		if (!HorztDockSliderStyleBox.IsDefault())
		{
			sb.WriteSize(15);
			HorztDockSliderStyleBox.WriteToBuf(sb);
		}
		if (!EmptyStyleBox.IsDefault())
		{
			sb.WriteSize(16);
			EmptyStyleBox.WriteToBuf(sb);
		}
		if (!Button.IsDefault())
		{
			sb.WriteSize(17);
			Button.WriteToBuf(sb);
		}
		if (!Label.IsDefault())
		{
			sb.WriteSize(18);
			Label.WriteToBuf(sb);
		}
		if (!LineEdit.IsDefault())
		{
			sb.WriteSize(19);
			LineEdit.WriteToBuf(sb);
		}
		if (!Scrollbar.IsDefault())
		{
			sb.WriteSize(20);
			Scrollbar.WriteToBuf(sb);
		}
		if (!TabContainer.IsDefault())
		{
			sb.WriteSize(21);
			TabContainer.WriteToBuf(sb);
		}
		if (!CheckBox.IsDefault())
		{
			sb.WriteSize(22);
			CheckBox.WriteToBuf(sb);
		}
		sb.WriteSize(-1);
	}
	/// <summary>
	/// ReadFromBuf loads the data from the buffer into the object. 
	/// maxField is used by Table.Filter to only load the fields that are needed.
	/// </summary>
	public override void ReadFromBuf(SerializationBuffer sb, int maxField)
	{
		Clear();
		int fieldIndex;
		StatusCode = sb.ReadByte();
		ID = sb.ReadInt();
		if (maxField < 2) return; // no need to do OnLoad we are in a filter
		Timestamp = sb.ReadDateTime();
		if (maxField < 3) return; // no need to do OnLoad we are in a filter
		EditByID = sb.ReadInt();
		fieldIndex = sb.ReadSize();
		if (fieldIndex > maxField) return; 
		if (fieldIndex == 4)
		{
			WindowFont.ReadFromBuf(sb);
			fieldIndex = sb.ReadSize();
			if (fieldIndex > maxField) return;
		}
		if (fieldIndex == 5)
		{
			WindowStyleBox.ReadFromBuf(sb);
			fieldIndex = sb.ReadSize();
			if (fieldIndex > maxField) return;
		}
		if (fieldIndex == 6)
		{
			TitleBarFont.ReadFromBuf(sb);
			fieldIndex = sb.ReadSize();
			if (fieldIndex > maxField) return;
		}
		if (fieldIndex == 7)
		{
			TitleBarStyleBox.ReadFromBuf(sb);
			fieldIndex = sb.ReadSize();
			if (fieldIndex > maxField) return;
		}
		if (fieldIndex == 8)
		{
			ActionItemFont.ReadFromBuf(sb);
			fieldIndex = sb.ReadSize();
			if (fieldIndex > maxField) return;
		}
		if (fieldIndex == 9)
		{
			ActionItemStyleBox.ReadFromBuf(sb);
			fieldIndex = sb.ReadSize();
			if (fieldIndex > maxField) return;
		}
		if (fieldIndex == 10)
		{
			ActionBarStyleBox.ReadFromBuf(sb);
			fieldIndex = sb.ReadSize();
			if (fieldIndex > maxField) return;
		}
		if (fieldIndex == 11)
		{
			DockStyleBox.ReadFromBuf(sb);
			fieldIndex = sb.ReadSize();
			if (fieldIndex > maxField) return;
		}
		if (fieldIndex == 12)
		{
			DockableStyleBox.ReadFromBuf(sb);
			fieldIndex = sb.ReadSize();
			if (fieldIndex > maxField) return;
		}
		if (fieldIndex == 13)
		{
			ContentStyleBox.ReadFromBuf(sb);
			fieldIndex = sb.ReadSize();
			if (fieldIndex > maxField) return;
		}
		if (fieldIndex == 14)
		{
			VertDockSliderStyleBox.ReadFromBuf(sb);
			fieldIndex = sb.ReadSize();
			if (fieldIndex > maxField) return;
		}
		if (fieldIndex == 15)
		{
			HorztDockSliderStyleBox.ReadFromBuf(sb);
			fieldIndex = sb.ReadSize();
			if (fieldIndex > maxField) return;
		}
		if (fieldIndex == 16)
		{
			EmptyStyleBox.ReadFromBuf(sb);
			fieldIndex = sb.ReadSize();
			if (fieldIndex > maxField) return;
		}
		if (fieldIndex == 17)
		{
			Button.ReadFromBuf(sb);
			fieldIndex = sb.ReadSize();
			if (fieldIndex > maxField) return;
		}
		if (fieldIndex == 18)
		{
			Label.ReadFromBuf(sb);
			fieldIndex = sb.ReadSize();
			if (fieldIndex > maxField) return;
		}
		if (fieldIndex == 19)
		{
			LineEdit.ReadFromBuf(sb);
			fieldIndex = sb.ReadSize();
			if (fieldIndex > maxField) return;
		}
		if (fieldIndex == 20)
		{
			Scrollbar.ReadFromBuf(sb);
			fieldIndex = sb.ReadSize();
			if (fieldIndex > maxField) return;
		}
		if (fieldIndex == 21)
		{
			TabContainer.ReadFromBuf(sb);
			fieldIndex = sb.ReadSize();
			if (fieldIndex > maxField) return;
		}
		if (fieldIndex == 22)
		{
			CheckBox.ReadFromBuf(sb);
			fieldIndex = sb.ReadSize();
			if (fieldIndex > maxField) return;
		}
		// no need to do OnLoad we are in a filter
	}
	/// <summary>
	/// ReadFromBuf loads the data from the buffer into the object. 
	/// </summary>
	public override void ReadFromBuf(SerializationBuffer sb)
	{
		Clear();
		int fieldIndex;
		StatusCode = sb.ReadByte();
		ID = sb.ReadInt();
		Timestamp = sb.ReadDateTime();
		EditByID = sb.ReadInt();
		fieldIndex = sb.ReadSize();
		if (fieldIndex == 4)
		{
			WindowFont.ReadFromBuf(sb);
			fieldIndex = sb.ReadSize();
		}
		if (fieldIndex == 5)
		{
			WindowStyleBox.ReadFromBuf(sb);
			fieldIndex = sb.ReadSize();
		}
		if (fieldIndex == 6)
		{
			TitleBarFont.ReadFromBuf(sb);
			fieldIndex = sb.ReadSize();
		}
		if (fieldIndex == 7)
		{
			TitleBarStyleBox.ReadFromBuf(sb);
			fieldIndex = sb.ReadSize();
		}
		if (fieldIndex == 8)
		{
			ActionItemFont.ReadFromBuf(sb);
			fieldIndex = sb.ReadSize();
		}
		if (fieldIndex == 9)
		{
			ActionItemStyleBox.ReadFromBuf(sb);
			fieldIndex = sb.ReadSize();
		}
		if (fieldIndex == 10)
		{
			ActionBarStyleBox.ReadFromBuf(sb);
			fieldIndex = sb.ReadSize();
		}
		if (fieldIndex == 11)
		{
			DockStyleBox.ReadFromBuf(sb);
			fieldIndex = sb.ReadSize();
		}
		if (fieldIndex == 12)
		{
			DockableStyleBox.ReadFromBuf(sb);
			fieldIndex = sb.ReadSize();
		}
		if (fieldIndex == 13)
		{
			ContentStyleBox.ReadFromBuf(sb);
			fieldIndex = sb.ReadSize();
		}
		if (fieldIndex == 14)
		{
			VertDockSliderStyleBox.ReadFromBuf(sb);
			fieldIndex = sb.ReadSize();
		}
		if (fieldIndex == 15)
		{
			HorztDockSliderStyleBox.ReadFromBuf(sb);
			fieldIndex = sb.ReadSize();
		}
		if (fieldIndex == 16)
		{
			EmptyStyleBox.ReadFromBuf(sb);
			fieldIndex = sb.ReadSize();
		}
		if (fieldIndex == 17)
		{
			Button.ReadFromBuf(sb);
			fieldIndex = sb.ReadSize();
		}
		if (fieldIndex == 18)
		{
			Label.ReadFromBuf(sb);
			fieldIndex = sb.ReadSize();
		}
		if (fieldIndex == 19)
		{
			LineEdit.ReadFromBuf(sb);
			fieldIndex = sb.ReadSize();
		}
		if (fieldIndex == 20)
		{
			Scrollbar.ReadFromBuf(sb);
			fieldIndex = sb.ReadSize();
		}
		if (fieldIndex == 21)
		{
			TabContainer.ReadFromBuf(sb);
			fieldIndex = sb.ReadSize();
		}
		if (fieldIndex == 22)
		{
			CheckBox.ReadFromBuf(sb);
			fieldIndex = sb.ReadSize();
		}
		OnLoad();
	}
	public override bool FieldIsDefault(int field)
	{
		switch(field)
		{
			case 0:return StatusCode == default;
			case 1:return ID == default;
			case 2:return Timestamp == default;
			case 3:return EditByID == default;
			case 4:return WindowFont.IsDefault();
			case 5:return WindowStyleBox.IsDefault();
			case 6:return TitleBarFont.IsDefault();
			case 7:return TitleBarStyleBox.IsDefault();
			case 8:return ActionItemFont.IsDefault();
			case 9:return ActionItemStyleBox.IsDefault();
			case 10:return ActionBarStyleBox.IsDefault();
			case 11:return DockStyleBox.IsDefault();
			case 12:return DockableStyleBox.IsDefault();
			case 13:return ContentStyleBox.IsDefault();
			case 14:return VertDockSliderStyleBox.IsDefault();
			case 15:return HorztDockSliderStyleBox.IsDefault();
			case 16:return EmptyStyleBox.IsDefault();
			case 17:return Button.IsDefault();
			case 18:return Label.IsDefault();
			case 19:return LineEdit.IsDefault();
			case 20:return Scrollbar.IsDefault();
			case 21:return TabContainer.IsDefault();
			case 22:return CheckBox.IsDefault();
		}
		return false;
	}
	public override bool FieldIsEqual(Data toFld, int field)
	{
		if (!(toFld is UITheme to)) return false;
		switch(field)
		{
			case 0:return StatusCode == to.StatusCode;
			case 1:return ID == to.ID;
			case 2:return Timestamp == to.Timestamp;
			case 3:return EditByID == to.EditByID;
			case 4:return WindowFont.IsEqualTo(to.WindowFont);
			case 5:return WindowStyleBox.IsEqualTo(to.WindowStyleBox);
			case 6:return TitleBarFont.IsEqualTo(to.TitleBarFont);
			case 7:return TitleBarStyleBox.IsEqualTo(to.TitleBarStyleBox);
			case 8:return ActionItemFont.IsEqualTo(to.ActionItemFont);
			case 9:return ActionItemStyleBox.IsEqualTo(to.ActionItemStyleBox);
			case 10:return ActionBarStyleBox.IsEqualTo(to.ActionBarStyleBox);
			case 11:return DockStyleBox.IsEqualTo(to.DockStyleBox);
			case 12:return DockableStyleBox.IsEqualTo(to.DockableStyleBox);
			case 13:return ContentStyleBox.IsEqualTo(to.ContentStyleBox);
			case 14:return VertDockSliderStyleBox.IsEqualTo(to.VertDockSliderStyleBox);
			case 15:return HorztDockSliderStyleBox.IsEqualTo(to.HorztDockSliderStyleBox);
			case 16:return EmptyStyleBox.IsEqualTo(to.EmptyStyleBox);
			case 17:return Button.IsEqualTo(to.Button);
			case 18:return Label.IsEqualTo(to.Label);
			case 19:return LineEdit.IsEqualTo(to.LineEdit);
			case 20:return Scrollbar.IsEqualTo(to.Scrollbar);
			case 21:return TabContainer.IsEqualTo(to.TabContainer);
			case 22:return CheckBox.IsEqualTo(to.CheckBox);
		}
		return false;
	}
	public override string FieldAsString(int field)
	{
		switch(field)
		{
			case 0:return StatusCode.AsString();
			case 1:return ID.AsString();
			case 2:return Timestamp.AsString();
			case 3:return EditByID.AsString();
			case 4:return WindowFont.AsString();
			case 5:return WindowStyleBox.AsString();
			case 6:return TitleBarFont.AsString();
			case 7:return TitleBarStyleBox.AsString();
			case 8:return ActionItemFont.AsString();
			case 9:return ActionItemStyleBox.AsString();
			case 10:return ActionBarStyleBox.AsString();
			case 11:return DockStyleBox.AsString();
			case 12:return DockableStyleBox.AsString();
			case 13:return ContentStyleBox.AsString();
			case 14:return VertDockSliderStyleBox.AsString();
			case 15:return HorztDockSliderStyleBox.AsString();
			case 16:return EmptyStyleBox.AsString();
			case 17:return Button.AsString();
			case 18:return Label.AsString();
			case 19:return LineEdit.AsString();
			case 20:return Scrollbar.AsString();
			case 21:return TabContainer.AsString();
			case 22:return CheckBox.AsString();
		}
		return string.Empty;
	}
	public override void FieldFromString(string str, int field)
	{
		switch(field)
		{
			case 0:StatusCode = str.AsByte(); return;
			case 1:ID = str.AsInt(); return;
			case 2:Timestamp = str.AsDateTime(); return;
			case 3:EditByID = str.AsInt(); return;
			case 4:WindowFont.FromString(str); return;
			case 5:WindowStyleBox.FromString(str); return;
			case 6:TitleBarFont.FromString(str); return;
			case 7:TitleBarStyleBox.FromString(str); return;
			case 8:ActionItemFont.FromString(str); return;
			case 9:ActionItemStyleBox.FromString(str); return;
			case 10:ActionBarStyleBox.FromString(str); return;
			case 11:DockStyleBox.FromString(str); return;
			case 12:DockableStyleBox.FromString(str); return;
			case 13:ContentStyleBox.FromString(str); return;
			case 14:VertDockSliderStyleBox.FromString(str); return;
			case 15:HorztDockSliderStyleBox.FromString(str); return;
			case 16:EmptyStyleBox.FromString(str); return;
			case 17:Button.FromString(str); return;
			case 18:Label.FromString(str); return;
			case 19:LineEdit.FromString(str); return;
			case 20:Scrollbar.FromString(str); return;
			case 21:TabContainer.FromString(str); return;
			case 22:CheckBox.FromString(str); return;
		}
		return;
	}
	public override string FieldName(int field)
	{
		if (field < 0 || field >= FieldCount) return string.Empty;
		return FieldNames[field];
	}
	public override string FieldLabel(int field)
	{
		if (field < 0 || field >= FieldCount) return string.Empty;
		return FieldLabels[field];
	}
	public override void FieldLabelSet(int field, string label)
	{
		if (field < 0 || field >= FieldCount) return;
		FieldLabels[field] = label;
	}
	public override string FieldColumnLabel(int field)
	{
		if (field < 0 || field >= FieldCount) return string.Empty;
		return ColumnLabels[field];
	}
	public override void FieldColumnLabelSet(int field, string label)
	{
		if (field < 0 || field >= FieldCount) return;
		ColumnLabels[field] = label;
	}
	public override void FieldMinSet(int field, object min)
	{
		if (field < 0 || field >= FieldCount) return;
		Min[field] = min;
	}
	public override object FieldMin(int field)
	{
		if (field < 0 || field >= FieldCount) return 0;
		return Min[field];
	}
	public override void FieldMaxSet(int field, object max)
	{
		if (field < 0 || field >= FieldCount) return;
		Max[field] = max;
	}
	public override object FieldMax(int field)
	{
		if (field < 0 || field >= FieldCount) return 0;
		return Max[field];
	}
	public override int FieldIdFromName(string name)
	{
		if (FieldIdLookup.TryGetValue(name, out int id)) return id;
		return -1;
	}
	/// <summary>
	/// Writes to sb the field formated as a key.
	/// maxSize is used for strings only.
	/// </summary>
	public override void FieldAsKey(int field, SerializationBuffer sb, int maxSize)
	{
		switch(field)
		{
			case 0:sb.Write(StatusCode); return;
			case 1:sb.Write(ID); return;
			case 2:sb.Write(Timestamp); return;
			case 3:sb.Write(EditByID); return;
			case 4:return; // DataField as key is not supported
			case 5:return; // DataField as key is not supported
			case 6:return; // DataField as key is not supported
			case 7:return; // DataField as key is not supported
			case 8:return; // DataField as key is not supported
			case 9:return; // DataField as key is not supported
			case 10:return; // DataField as key is not supported
			case 11:return; // DataField as key is not supported
			case 12:return; // DataField as key is not supported
			case 13:return; // DataField as key is not supported
			case 14:return; // DataField as key is not supported
			case 15:return; // DataField as key is not supported
			case 16:return; // DataField as key is not supported
			case 17:return; // DataField as key is not supported
			case 18:return; // DataField as key is not supported
			case 19:return; // DataField as key is not supported
			case 20:return; // DataField as key is not supported
			case 21:return; // DataField as key is not supported
			case 22:return; // DataField as key is not supported
		}
	}
	/// <summary>
	/// Returns the field as an object.
	/// </summary>
	public override Object FieldAsObject(int field)
	{
		switch(field)
		{
			case 0:return (Object)StatusCode;
			case 1:return (Object)ID;
			case 2:return (Object)Timestamp;
			case 3:return (Object)EditByID;
			case 4:return (Object)WindowFont;
			case 5:return (Object)WindowStyleBox;
			case 6:return (Object)TitleBarFont;
			case 7:return (Object)TitleBarStyleBox;
			case 8:return (Object)ActionItemFont;
			case 9:return (Object)ActionItemStyleBox;
			case 10:return (Object)ActionBarStyleBox;
			case 11:return (Object)DockStyleBox;
			case 12:return (Object)DockableStyleBox;
			case 13:return (Object)ContentStyleBox;
			case 14:return (Object)VertDockSliderStyleBox;
			case 15:return (Object)HorztDockSliderStyleBox;
			case 16:return (Object)EmptyStyleBox;
			case 17:return (Object)Button;
			case 18:return (Object)Label;
			case 19:return (Object)LineEdit;
			case 20:return (Object)Scrollbar;
			case 21:return (Object)TabContainer;
			case 22:return (Object)CheckBox;
		}
		return null;
	}
	/// <summary>
	/// Sets the field to an object.
	/// </summary>
	public override void FieldFromObject(Object o,  int field)
	{
		switch(field)
		{
			case 0:StatusCode = (byte) o; return;
			case 1:ID = (int) o; return;
			case 2:Timestamp = (DateTime) o; return;
			case 3:EditByID = (int) o; return;
			case 4:WindowFont = (FontSettings.DataField) o; return;
			case 5:WindowStyleBox = (StyleBoxSettings.DataField) o; return;
			case 6:TitleBarFont = (FontSettings.DataField) o; return;
			case 7:TitleBarStyleBox = (StyleBoxSettings.DataField) o; return;
			case 8:ActionItemFont = (FontSettings.DataField) o; return;
			case 9:ActionItemStyleBox = (StyleBoxSettings.DataField) o; return;
			case 10:ActionBarStyleBox = (StyleBoxSettings.DataField) o; return;
			case 11:DockStyleBox = (StyleBoxSettings.DataField) o; return;
			case 12:DockableStyleBox = (StyleBoxSettings.DataField) o; return;
			case 13:ContentStyleBox = (StyleBoxSettings.DataField) o; return;
			case 14:VertDockSliderStyleBox = (StyleBoxSettings.DataField) o; return;
			case 15:HorztDockSliderStyleBox = (StyleBoxSettings.DataField) o; return;
			case 16:EmptyStyleBox = (StyleBoxSettings.DataField) o; return;
			case 17:Button = (ButtonSettings.DataField) o; return;
			case 18:Label = (LabelSettings.DataField) o; return;
			case 19:LineEdit = (LineEditSettings.DataField) o; return;
			case 20:Scrollbar = (ScrollbarSettings.DataField) o; return;
			case 21:TabContainer = (TabContainerSettings.DataField) o; return;
			case 22:CheckBox = (CheckBoxSettings.DataField) o; return;
		}
	}
	/// <summary>
	/// Returns the field Type.
	/// </summary>
	public override Type FieldType(int field)
	{
		switch(field)
		{
			case 0:return StatusCode.GetType();
			case 1:return ID.GetType();
			case 2:return Timestamp.GetType();
			case 3:return EditByID.GetType();
			case 4:return WindowFont.GetType();
			case 5:return WindowStyleBox.GetType();
			case 6:return TitleBarFont.GetType();
			case 7:return TitleBarStyleBox.GetType();
			case 8:return ActionItemFont.GetType();
			case 9:return ActionItemStyleBox.GetType();
			case 10:return ActionBarStyleBox.GetType();
			case 11:return DockStyleBox.GetType();
			case 12:return DockableStyleBox.GetType();
			case 13:return ContentStyleBox.GetType();
			case 14:return VertDockSliderStyleBox.GetType();
			case 15:return HorztDockSliderStyleBox.GetType();
			case 16:return EmptyStyleBox.GetType();
			case 17:return Button.GetType();
			case 18:return Label.GetType();
			case 19:return LineEdit.GetType();
			case 20:return Scrollbar.GetType();
			case 21:return TabContainer.GetType();
			case 22:return CheckBox.GetType();
		}
		return null;
	}
	public partial class Context : RecordContext<UITheme>
	{
		protected override void OnBaseConstruct()
		{
			table = TableFactory<Table,UITheme>.Rent();
		}
		internal static void InitContextFactory() => RecordContextFactory<UITheme>.SetCreateMethod(()=>new Context(),_setEditById);
		static Context()
		{
			InitContextFactory();
		}
		public static Context Rent(int EditByID=-2) => (Context) RecordContextFactory<UITheme>.Rent(EditByID);
		public override Table Table => (Table) table;
		public override void Dispose()
		{
			RecordContextFactory<UITheme>.Return(this);
		}
	}
	public static class FID
	{
		public const int StatusCode = 0;
		public const int ID = 1;
		public const int Timestamp = 2;
		public const int EditByID = 3;
		public const int WindowFont = 4;
		public const int WindowStyleBox = 5;
		public const int TitleBarFont = 6;
		public const int TitleBarStyleBox = 7;
		public const int ActionItemFont = 8;
		public const int ActionItemStyleBox = 9;
		public const int ActionBarStyleBox = 10;
		public const int DockStyleBox = 11;
		public const int DockableStyleBox = 12;
		public const int ContentStyleBox = 13;
		public const int VertDockSliderStyleBox = 14;
		public const int HorztDockSliderStyleBox = 15;
		public const int EmptyStyleBox = 16;
		public const int Button = 17;
		public const int Label = 18;
		public const int LineEdit = 19;
		public const int Scrollbar = 20;
		public const int TabContainer = 21;
		public const int CheckBox = 22;
	}
	static object[] Min = { (byte) 0,(int) -2147483648,(long) 0,(int) -2147483648,(int) 0,(int) 0,(int) 0,(int) 0,(int) 0,(int) 0,(int) 0,(int) 0,(int) 0,(int) 0,(int) 0,(int) 0,(int) 0,(int) 0,(int) 0,(int) 0,(int) 0,(int) 0,(int) 0, };
	static object[] Max = { (byte) 255,(int) 2147483647,(long) 3155378975999999999,(int) 2147483647,(int) 0,(int) 0,(int) 0,(int) 0,(int) 0,(int) 0,(int) 0,(int) 0,(int) 0,(int) 0,(int) 0,(int) 0,(int) 0,(int) 0,(int) 0,(int) 0,(int) 0,(int) 0,(int) 0, };
	static string[] FieldLabels =
	{
		"Status Code",
		"ID",
		"Timestamp",
		"Edit By ID",
		"Window Font",
		"Window Style Box",
		"Title Bar Font",
		"Title Bar Style Box",
		"Action Item Font",
		"Action Item Style Box",
		"Action Bar Style Box",
		"Dock Style Box",
		"Dockable Style Box",
		"Content Style Box",
		"Vert Dock Slider Style Box",
		"Horzt Dock Slider Style Box",
		"Empty Style Box",
		"Button",
		"Label",
		"Line Edit",
		"Scrollbar",
		"Tab Container",
		"Check Box",
	};
	static string[] ColumnLabels =
	{
		"Status Code",
		"ID",
		"Timestamp",
		"Edit By ID",
		"Window Font",
		"Window Style Box",
		"Title Bar Font",
		"Title Bar Style Box",
		"Action Item Font",
		"Action Item Style Box",
		"Action Bar Style Box",
		"Dock Style Box",
		"Dockable Style Box",
		"Content Style Box",
		"Vert Dock Slider Style Box",
		"Horzt Dock Slider Style Box",
		"Empty Style Box",
		"Button",
		"Label",
		"Line Edit",
		"Scrollbar",
		"Tab Container",
		"Check Box",
	};
	static Dictionary<string, int> FieldIdLookup = new()
	{
		{ "StatusCode", 0 },
		{ "ID", 1 },
		{ "Timestamp", 2 },
		{ "EditByID", 3 },
		{ "WindowFont", 4 },
		{ "WindowStyleBox", 5 },
		{ "TitleBarFont", 6 },
		{ "TitleBarStyleBox", 7 },
		{ "ActionItemFont", 8 },
		{ "ActionItemStyleBox", 9 },
		{ "ActionBarStyleBox", 10 },
		{ "DockStyleBox", 11 },
		{ "DockableStyleBox", 12 },
		{ "ContentStyleBox", 13 },
		{ "VertDockSliderStyleBox", 14 },
		{ "HorztDockSliderStyleBox", 15 },
		{ "EmptyStyleBox", 16 },
		{ "Button", 17 },
		{ "Label", 18 },
		{ "LineEdit", 19 },
		{ "Scrollbar", 20 },
		{ "TabContainer", 21 },
		{ "CheckBox", 22 },
	};
	static string[] FieldNames =
	{
		"StatusCode",
		"ID",
		"Timestamp",
		"EditByID",
		"WindowFont",
		"WindowStyleBox",
		"TitleBarFont",
		"TitleBarStyleBox",
		"ActionItemFont",
		"ActionItemStyleBox",
		"ActionBarStyleBox",
		"DockStyleBox",
		"DockableStyleBox",
		"ContentStyleBox",
		"VertDockSliderStyleBox",
		"HorztDockSliderStyleBox",
		"EmptyStyleBox",
		"Button",
		"Label",
		"LineEdit",
		"Scrollbar",
		"TabContainer",
		"CheckBox",
	};
	static string[] TypeNames =
	{
		"byte",
		"int",
		"DateTime",
		"int",
		"DataField",
		"DataField",
		"DataField",
		"DataField",
		"DataField",
		"DataField",
		"DataField",
		"DataField",
		"DataField",
		"DataField",
		"DataField",
		"DataField",
		"DataField",
		"DataField",
		"DataField",
		"DataField",
		"DataField",
		"DataField",
		"DataField",
	};
	public override string[] StaticTypeNames => TypeNames;
	static List<ValidationFunc>[] ValidationFuncs = new List<ValidationFunc>[23];
	public override List<ValidationFunc>[] StaticValidationFuncs => ValidationFuncs;
	public partial class Util : RecordUtil<UITheme>
	{
	}
	public partial class Table : Table<UITheme>
	{
	}
}
